<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V5.0//EN"
"../tools/docbook-dtd/dtd/docbook.dtd">
<!--
	Together Workflow Editor
	Copyright (C) 2011 Together Teamsolutions Co., Ltd.
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program. If not, see http://www.gnu.org/licenses
-->
<chapter version="5.0" xml:id="xpdl_elements"
         xmlns="http://docbook.org/ns/docbook">
  <title>XPDL Elements</title>

  <para>This chapter describes how TWE works, corresponding to WfMC (Workflow
  Management Coalition) specifications (<link xlink:href="http://www.wfmc.org"
  xmlns:xlink="http://www.w3.org/1999/xlink">www.wfmc.org</link>). WfMC
  provides an interface for workflow process definition. The interface defines
  a common meta-model for describing the process definition and XML schema for
  interchange of process definitions - <acronym>XPDL</acronym> (XML Process
  Definition Language). The focus is on XPDL schema elements, and TWE's
  property panels for editing them.</para>

  <para>TWE is a tool for <emphasis>Process Definition</emphasis> modelling.
  The final output of this process modelling is a XPDL output file, which can
  be interpreted at runtime by the workflow engine(s). TWE accomplished three
  main goals:<itemizedlist>
      <listitem>
        <para>Graphical representation of process definition</para>
      </listitem>

      <listitem>
        <para>Export of process definitions to XPDL</para>
      </listitem>

      <listitem>
        <para>Import of any valid XPDL and its graphical representation</para>
      </listitem>
    </itemizedlist></para>

  <para>TWE handles one (main) package at a time, although it displays in a
  read-only mode all the external packages of the main package (and all the
  external packages of external packages and so on). Main TWE component window
  is labeled Graph. It is the graphic representation of workflow process or
  activity set, depending on what is currently selected.</para>

  <para>Participants are represented with swim lines which encapsulate other
  smaller blocks (don't be confused; participants can be horizontally or
  vertically oriented). Those blocks represent activities.</para>

  <para>Lines which connect activities are transitions. Graph specific
  elements are Start and End bubbles. These elements are not the part of WfMC
  specification, although they appear in the resulting XPDL file as extended
  attribute elements.</para>

  <para>The rest of XPDL elements can be accessed and modified through their
  panel properties.</para>

  <informaltable frame="none">
    <tgroup cols="2" colsep="0">
      <tbody>
        <row>
          <entry align="justify" valign="middle">The workflow process
          definition interface defines a common interchange format, which
          supports the transfer of workflow process definitions between
          different products. A workflow process definition, generated by TWE,
          is capable of interpretation in different workflow run-time
          products. The principles of <emphasis>Process Definition
          Interchange</emphasis> are based on Meta-Model framework. This
          meta-data model identifies commonly used entities within a process
          definition, their relationships and attributes. A variety of
          attributes describe the characteristics of this limited set of
          entities. Using this Meta-Model, TWE can transfer models using an
          XPDL as a common exchange format. Beside this interchange, TWE is
          also used for internal representation of process definitions. The
          whole concept is shown on the picture:</entry>

          <entry valign="middle"><mediaobject>
              <imageobject>
                <imagedata align="center" contentdepth="100%"
                           fileref="Images/Concept.jpg" scalefit="1"
                           valign="middle" width="100%"/>
              </imageobject>
            </mediaobject></entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>There is a mandatory minimum set of objects, which must be supported
  within XPDL. This "minimum meta-data model" identifies those commonly used
  entities within a process definition and describes their usage semantics.
  Extensibility is provided by the facility to encompass additional object
  attributes ("extended attributes") which can be included as extensions to
  the basic Meta-Model to meet the specific needs of an individual product or
  workflow system.</para>

  <para>Corresponding to the previous picture with concept of Process
  Definition Interchange, this chapter gives overview of Meta-Model entities
  (<emphasis>Meta-Model framework</emphasis>) and explains representation of
  these objects in TWE (<emphasis>Internal representation</emphasis>) with
  XPDL attributes (<emphasis>XML representation</emphasis>) that are defined
  in it.</para>

  <sect1 xml:id="Meta_Model">
    <title>Meta-Model</title>

    <para>The meta-model identifies the basic set of entities and attributes
    for the exchange of process definitions.</para>

    <figure>
      <title>Package Meta-Model</title>

      <mediaobject condition="demo-details">
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="Images/Package_Meta_Model.gif" scalefit="1"
                     width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>For each of the above entities, there is an associated set of
    attributes (some mandatory and others optional) which describe the
    characteristics of the entity. If there is a need of using an additional
    characteristics, "extended attributes" for various entities may be defined
    to allow extension of the scope of the Meta-Model in a controlled
    manner.</para>

    <para>All those entities except "Message Flow" and "Group" type artifacts
    are maintained by TWE. The current version of TWE is written as an XPDL 1
    extension towards XPDL 2, and still does not support the whole XPDL 2
    Meta-Model but only the parts necessary to support simple BPMN
    conformance, and still to allow workflow engines to execute XPDL 1
    "migrated" process definitions.</para>

    <para>"Resource Repository " is external to the workflow process
    definitions. In some complex processes, participant declaration may refer
    to a resource repository, which may be on Organisational Model (OM). WfMC
    Meta-Model specification defines a simple in-built (Minimal)
    Organisational Model or permits access to an externally defined OM. Note
    that XPDL specification does not define or require a resource
    repository.</para>

    <para>TWE works only with a <emphasis>Minimal Organisational
    Model</emphasis> so there is no external Organisational Model provided. In
    this model, there aren't any relationships between participants. TWE may
    refer (import) any external XPDL structure - <emphasis>External
    Package</emphasis>. That External XPDL file may contain whole
    Organisational Model, so that External Package can act like
    <emphasis>Resource Repository</emphasis>.</para>

    <para>As it is shown in the previous picture, minimal process model
    includes various entities whose scope may be wider than a single process
    definition. In particular the definitions of participants, applications
    and workflow relevant data may be referenced from a number of process
    definitions. The Meta-Model assumes the use of a common process definition
    <emphasis>Resource Repository</emphasis>. Repository holds the various
    entity types comprising the process definition. Within the repository
    itself and to support the efficient transfer of process definition data
    to/from the repository, the concept of a PACKAGE is introduced, which acts
    as a <emphasis>container</emphasis> for the grouping of common data
    entities from a number of different process definitions, to avoid
    redefinition within each individual process definition. Each process
    definition contained within the package will automatically inherit any
    common attribute from the process model container, unless they are
    separately re-specified locally within the process definition.</para>
  </sect1>

  <sect1 xml:id="Package">
    <title>Package</title>

    <para>It is possible to define several processes within one package, which
    may share the same tools (applications) and participants.</para>

    <para>The Package acts as a container for grouping together a number of
    individual process definitions and associated entity data, which is
    applicable to all the contained process definitions.</para>

    <para>You can chose to create one package per workflow process, which
    should contain all the necessary workflow processes as well as all the
    associated tools (workflow applications) and workflow participants.
    Another approach is to define just parts of one process definition or
    common parts of several processes within one package (e.g. a workflow
    participant list or a workflow application list), and then to reference it
    from other packages. Within a package, the scope of the definitions of
    some entities is global and these entities can be referenced from all
    workflow process definitions contained within the package. Those entities
    are:<itemizedlist>
        <listitem>
          <para>Workflow Process Definition,</para>
        </listitem>

        <listitem>
          <para>Workflow Participant Specification,</para>
        </listitem>

        <listitem>
          <para>Workflow Application Declaration and</para>
        </listitem>

        <listitem>
          <para>Workflow Relevant Data</para>
        </listitem>
      </itemizedlist></para>

    <para>TWE provides a way to manage above listed entities (within one
    package). On <xref linkend="mainToolbarOrganization"/>, you can see where
    is the toolbar part for handling the properties of the selected
    Package.</para>

    <para>To create a new Package in TWE, you simply select File-&gt;New, or
    click appropriate button in the toolbar <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/new.gif"/>
        </imageobject>
      </inlinemediaobject> (the first button on the left). If you are
    currently editing some other XPDL file and there are some unsaved changes
    there, prior to creating a new Package, TWE will ask you if you want to
    save the changes.</para>

    <para>It is important to say that actions represented by buttons shown on
    the toolbar picture (and also corresponding menu items) are applied to the
    currently selected package, which can be the main one or one of the
    externally referenced packages.</para>

    <para>If you select the main package, you can modify its properties, but
    this is not possible for the external packages. Those external packages
    are read-only, and you can only read their properties.</para>

    <sect2 xml:id="Package_Attributes">
      <title>Package attributes</title>

      <table frame="all">
        <title>General attributes</title>

        <tgroup align="left" cols="3" colsep="1" rowsep="1">
          <colspec align="center" colnum="2" colwidth="1.00*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry align="center">M/O</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Id</entry>

              <entry align="center">M (mandatory)</entry>

              <entry>Used to identify the package.</entry>
            </row>

            <row>
              <entry>Name</entry>

              <entry align="center">O (optional)</entry>

              <entry>Name of the package.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>When you create a new Package in TWE, these attributes are getting
      a default value newpkg. It's up to user to change it to some meaningful
      values.</para>

      <table frame="all">
        <title>Package Header</title>

        <tgroup align="left" cols="3" colsep="1" rowsep="1">
          <colspec align="center" colnum="2"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>M/O</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>XPDL Version</entry>

              <entry>M</entry>

              <entry>Version of XPDL.</entry>
            </row>

            <row>
              <entry>Vendor</entry>

              <entry>M</entry>

              <entry>Defines the origin of this package definition and
              contains vendor's name, vendor's product name and product's
              release number.</entry>
            </row>

            <row>
              <entry>Created</entry>

              <entry>M</entry>

              <entry>Creation date of workflow package.</entry>
            </row>

            <row>
              <entry>Description</entry>

              <entry>O</entry>

              <entry>Short textual description of the workflow
              package.</entry>
            </row>

            <row>
              <entry>Documentation</entry>

              <entry>O</entry>

              <entry>Operating System specific path- and filename of help
              file/description file.</entry>
            </row>

            <row>
              <entry>Priority Unit</entry>

              <entry>O</entry>

              <entry>A text string with user defined semantics.</entry>
            </row>

            <row>
              <entry>Cost Unit</entry>

              <entry>O</entry>

              <entry>Units used in Simulation Data (usually expressed in terms
              of a currency).</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The Package Header keeps all information central to a package. By
      default, when you create a new Package, XPDL version will be 2.1 (the
      version currently partially supported by TWE). If TWE reads a document
      that have XPDL version set to the value different then 2.1, it will
      report it as an warning. When new package is created,
      <emphasis>Vendor</emphasis> attribute is set to
      <emphasis>Together</emphasis> and <emphasis>Created</emphasis> attribute
      to the current date and time of creation in ISO-8601 format.</para>

      <table frame="all">
        <title>Redefinable Header</title>

        <tgroup align="left" cols="3" colsep="1" rowsep="1">
          <colspec align="center" colnum="2"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>M/O</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Author</entry>

              <entry>O</entry>

              <entry>Name of the author of this package.</entry>
            </row>

            <row>
              <entry>Version</entry>

              <entry>O</entry>

              <entry>Version of this package.</entry>
            </row>

            <row>
              <entry>Code page</entry>

              <entry>O</entry>

              <entry>The code page used for the text parts.</entry>
            </row>

            <row>
              <entry>Country key</entry>

              <entry>O</entry>

              <entry>Country code based on ISO 3166. It could be either the
              three digits country code number, or the two alpha characters
              country codes.</entry>
            </row>

            <row>
              <entry>Responsible(s)</entry>

              <entry>O</entry>

              <entry>Workflow participants, that is responsible for this
              workflow package; the supervisors during run time (usually an
              Organisational Unit or a Human). It is assumed that the
              supervisors are responsible during run time.</entry>
            </row>

            <row>
              <entry>Publication Status</entry>

              <entry>O</entry>

              <entry>Status of the Package. Possible values are: <itemizedlist>
                  <listitem>
                    <para>UNDER_REVISION</para>
                  </listitem>

                  <listitem>
                    <para>RELEASED</para>
                  </listitem>

                  <listitem>
                    <para>UNDER_TEST</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The redefinable header covers those header attributes that may be
      defined at the package definition header and may be redefined in the
      header of any process definition.</para>

      <para>If publication status is <emphasis>set to Released</emphasis>, by
      default TWE does not allow saving of such XPDL document if it contains
      any kind of errors or warnings (there is a configuration property
      <emphasis>AllowInvalidPackageSaving</emphasis> in
      togwecontroller.properties file, which you can change in order to always
      allow saving of document).</para>

      <table frame="all">
        <title>Conformance Class</title>

        <tgroup align="left" cols="3" colsep="1" rowsep="1">
          <colspec align="center" colnum="2"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>M/O</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Conformance Class</entry>

              <entry>O</entry>

              <entry>Describes the Conformance Class to which the definitions
              in this package are restricted to. Possible values
              are:<itemizedlist>
                  <listitem>
                    <para>FULL-BLOCKED the network structure is restricted to
                    proper nesting of SPLIT/JOIN and LOOP.</para>
                  </listitem>

                  <listitem>
                    <para>LOOP-BLOCKED the network structure is restricted to
                    proper nesting of LOOP.</para>
                  </listitem>

                  <listitem>
                    <para>NON-BLOCKED there is no restriction on the network
                    structure. This is the default.</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The conformance class declaration allows description of the
      conformance class to which the definitions in this package definition
      are restricted to. The specified class applies to all the contained
      process definitions. TWE supports all defined conformance classes. This
      means that when creating graphs (networks of activities and transitions)
      for a WorkflowProcess or ActivitySet, TWE will report as an error if
      graph conformance is not satisfied.</para>

      <table condition="demo-details" frame="all">
        <title>Script element</title>

        <tgroup align="left" cols="3" colsep="1" rowsep="1">
          <colspec align="left" colnum="2" colwidth="1.00*"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>M/O</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Type</entry>

              <entry>M</entry>

              <entry>Identifies the scripting language used in expressions. It
              is recommended that the Type will be selected from the following
              strings: text/javascript, text/vbscript, text/tcl,
              text/ecmascript, text/xml. This</entry>
            </row>

            <row>
              <entry>Version</entry>

              <entry>O</entry>

              <entry>This is the version of the scripting language.</entry>
            </row>

            <row>
              <entry>Grammar</entry>

              <entry>O</entry>

              <entry>This is a reference to a document that specifies the
              grammar of the language. It could be, for example, an XML
              schema, a DTD, or a BNF.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para condition="demo-emptytext">The Script element identifies the
      scripting language used in XPDL expressions. In the runtime, workflow
      engine should consider the type specified, and interpret all expressions
      using appropriate scripting language interpreter. So, after specifying
      the scripting language type, make sure you are writing all the
      expressions (for transition conditions, actual parameters, deadline
      conditions, etc.) according to the language syntax.</para>
    </sect2>

    <sect2>
      <title>Package property panel</title>

      <para>In TWE, the icon <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/packageproperties.gif" format="GIF"/>
          </imageobject>
        </inlinemediaobject> from package toolbar (or package menu) is used
      for defining above mentioned properties, as well as all other package
      properties and sub-elements, through appropriate property panels. Also,
      you can get property panel for any Package element by selecting it in
      Package tree component, and choosing Properties action from the edit
      menu or toolbar.</para>

      <para>Package property panel contains a lot of different data about the
      main XPDL element - Package. Actually, you are able to access almost any
      XPDL element panel by navigating through the Package properties panel.
      All information are organized in several tabs: general, package header,
      redefinable header, external packages, type declarations, participants,
      applications, workflow variables, pools, associations, artifacts,
      workflow processes and namespaces</para>

      <para>All the tabs that will be mentioned can be also displayed as a
      separate property panels.</para>

      <sect3>
        <title>General tab - displays general package data</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry align="center" valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesGeneralDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry align="justify" colsep="0" valign="middle"><para>Tab
                has tree parts. First part contains package's id, name and
                graph conformance. As already mentioned, TWE supports and
                validates XPDL depending on specified conformance
                level.</para><para>Second part contains information about
                script language: type, version and grammar.</para><para>Third
                part displays list of package's external attributes and offers
                toolbar with operations to handle extended
                attributes</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Package header tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry align="justify" colsep="0"
                valign="middle"><para>Default value for field <emphasis>XPDL
                version</emphasis> is 2.1, and for field
                <emphasis>vendor</emphasis> is (c) Together Teamsolutions Co.,
                Ltd.</para><para>Field <emphasis>Created</emphasis> contains
                creation time and date, and field
                <emphasis>Description</emphasis> contains short package's
                description.</para><para><emphasis>Documentation</emphasis>
                field binds external file with package. <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="Images/treeDotsButton.gif"/>
                    </imageobject>
                  </inlinemediaobject> button opens a choose file dialog for
                finding appropriate one.</para></entry>

                <entry align="center" valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesHeaderDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Redefinable header tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry align="center" valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesRedefinableDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry align="justify" colsep="0" valign="middle"><para>Tab
                has two parts. First part contains the following fields:
                <emphasis>Publication status</emphasis> (can have one of the
                following values: under revision, under test, or released),
                <emphasis>Author</emphasis> (package's author),
                <emphasis>Version</emphasis> (version number for the package),
                <emphasis>Codepage</emphasis> and <emphasis>Country
                key</emphasis>. </para><para>As already mentioned, TWE lets
                you save your work despite the errors if you didn't set
                <emphasis>Publication status </emphasis>to
                <emphasis>Released</emphasis>. In the case you've set it to
                released, it won't be permitted to save your work until you
                correct all the errors. This behaviour can be configured in
                togwecontroller.properties file, by setting the value of
                property <emphasis>AllowInvalidPackageSaving</emphasis> to
                true. </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Second part, called <emphasis>Responsibles</emphasis>, contains
        list of all responsibles for the package and operations for managing
        the list. Any participants known to this package can become the
        responsible.</para>

        <para>When you press the button for defining new responsible, this
        action invokes a window with a combo box with a list of all possible
        participants you can chose.</para>

        <para>Responsible person must be a participant that is already
        defined. When adding "Responsibles" for the whole package,
        participants defined inside that package or inside externally
        referenced packages can be added, and when adding "Responsibles" for a
        process, you can also add participants defined for this
        process.</para>

        <para>Beside the combo box with a list of the responsibles, there is a
        shortcut button. If you press this button, the property panel for the
        participant selected in combo box will be shown.</para>
      </sect3>

      <sect3>
        <title>External packages tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry align="justify" colsep="0" valign="middle"><para>It
                contains a list of all external packages for the package and
                toolbar buttons for managing the listed external package
                elements.</para></entry>

                <entry align="center" valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesExtPackDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Type declarations tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry align="center" valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesTypeDeclDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>It contains
                information about all type declarations in a form of a table
                and operations for their managing. Each table row (type
                declaration) is described with <emphasis>id</emphasis>,
                <emphasis>name</emphasis> (optional value) and
                <emphasis>type</emphasis>. It contains toolbar buttons for
                managing the listed type declaration elements.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Participants tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>It contains
                information about all package's participants. Each table row
                (participant) is described with <emphasis>id</emphasis>,
                <emphasis>name</emphasis> (optional value) and
                <emphasis>participant type</emphasis>. It contains toolbar
                buttons for managing the listed participant
                elements.</para></entry>

                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesParticipantsDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Applications tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesApplicationsDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>It contains
                information about all package's applications. Each table row
                (application) is described with <emphasis>id</emphasis> and
                <emphasis>name</emphasis> (optional value). It contains
                toolbar buttons for managing the listed application
                elements.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Workflow variables tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>It contains
                information about all package's workflow variables. Each table
                row (workflow variable) is described with
                <emphasis>id</emphasis>, <emphasis>name</emphasis> (optional
                value) and <emphasis>data type</emphasis>. It contains toolbar
                buttons for managing the listed workflow variable
                elements.</para></entry>

                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesVariablesDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Associations tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>It contains
                information about all associations between Artifacts and
                Activities defined in the Package. Each table row is described
                with <emphasis>id</emphasis>, <emphasis>name</emphasis>
                (optional value) , source and the target of an association and
                <emphasis>association direction</emphasis>. It contains
                toolbar buttons for managing the listed
                elements.</para></entry>

                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesAssociationsDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Artifacts tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>It contains
                information about all artifacts defined in the package. Each
                table row is described with <emphasis>id</emphasis>,
                <emphasis>name</emphasis> (optional value), artifact type and
                <emphasis>text annotation </emphasis>(optional value). It
                contains toolbar buttons for managing the listed
                elements.</para></entry>

                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesArtifactsDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Pools tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesPoolsDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>It contains
                information about all the package's pools for workflow
                processes. Each table row (pool) is described with
                <emphasis>id</emphasis>, <emphasis>name</emphasis> (optional
                value), orientation, process (a reference to the process or
                activity set) and <emphasis>Lanes</emphasis>. TWE does not
                allow creation or removal of the pools. Whenever new Workflow
                process is created or removed, corresponding pool gets
                created/removed. There is a toolbar where only the button that
                allows to edit the pool properties is enabled. </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Workflow processes tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesProcessesDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>It contains
                information about all package's workflow processes. Each table
                row (workflow process) is described with
                <emphasis>id</emphasis>, <emphasis>name</emphasis> (optional
                value) and <emphasis>Access level</emphasis> (optional value,
                can have one of the values: <emphasis>private</emphasis> or
                <emphasis>public</emphasis>). It contains toolbar buttons for
                managing the listed workflow process elements. </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Namespaces tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>This property panel
                shows all namespaces defined within the XPDL document. User
                can add additional namespaces. Usually, additional namespaces
                are needed to insure document validity when user defines
                "complex" extended attributes. It contains information about
                all package's namespaces in a form of a table and operations
                for their managing. Each table row (namespace) is described
                with <emphasis>name</emphasis> and
                <emphasis>location</emphasis>. It contains toolbar buttons for
                managing the listed namespace elements.</para></entry>

                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/packagePropertiesNamespacesDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>
    </sect2>
  </sect1>

  <sect1 xml:id="Process_ProcessDefinition">
    <title>Workflow Process</title>

    <para>The Process Definition entity provides contextual information that
    applies to other entities within the process. This describes the process
    itself. It is a container for the process itself and provides information
    associated with administration (creation date, author, etc.) or to be used
    during process execution (initiation parameters to be used, execution
    priority, time limits to be checked, person to be notified, simulation
    information, etc.). Definition entity thus provides header information for
    the process definition and is therefore related to all other entities in
    that process.</para>

    <figure>
      <title>Workflow Process Meta-Model</title>

      <mediaobject condition="demo-details">
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="Images/Process_Meta_Model.gif" scalefit="1"
                     width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para condition="demo-emptytext">The Workflow Process Definition defines
    the elements that make a workflow. It contains definitions or
    declarations, respectively, for Activity and, optionally, for Transition,
    Application, and Process Relevant Data entities.</para>

    <para condition="demo-emptytext">A Workflow Process may run as an
    implementation of an activity of type subflow; in this case parameters may
    be defined as attributes of the process.</para>

    <para condition="demo-emptytext">TWE provides a way to manage process
    definition entities. On <xref linkend="mainToolbarOrganization"/>, you can
    see where is the toolbar part for handling the propertiesOn <xref
    linkend="mainToolbarOrganization"/> you can see the organization of the
    selected WorkflowProcess.</para>

    <para condition="demo-emptytext">If you create (override) some process
    with the same Id as the one from the external package, only the one from
    the current package can be used as the implementation process of sublfow
    activity.</para>

    <para condition="demo-emptytext">Typically, you will create a new process
    by pressing the button <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/processnew.gif"/>
        </imageobject>
      </inlinemediaobject> from the main toolbox or selecting appropriate item
    from Package menu.</para>

    <sect2 condition="demo-emptytext">
      <title>WorkflowProcess attributes</title>

      <para>WorkflowProcess attributes can be divided in few logical
      parts:</para>

      <table>
        <title>General Attributes</title>

        <tgroup cols="3" colsep="1" rowsep="1">
          <colspec align="center" colnum="2"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>M/O</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Id</entry>

              <entry>M</entry>

              <entry>Used to identify the workflow process (Read
              Only).</entry>
            </row>

            <row>
              <entry>Name</entry>

              <entry>O</entry>

              <entry>Name of the model, used to identify the workflow
              process.</entry>
            </row>

            <row>
              <entry>AccessLevel</entry>

              <entry>O</entry>

              <entry>The Access level of a process may be either PUBLIC or
              PRIVATE. If PUBLIC, the process may be invoked by an external
              system or application. A process with private access may only be
              invoked from a SubFlow Activity.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table>
        <title>Process Header</title>

        <tgroup cols="3" colsep="1" rowsep="1">
          <colspec align="center" colnum="2"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>M/O</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Duration Unit</entry>

              <entry>M</entry>

              <entry>Describes the default unit to be applied to an integer
              duration value that has no unit tag. Possible units
              are:<simplelist columns="1">
                  <member>Y - year</member>

                  <member>M - month</member>

                  <member>D - day</member>

                  <member>H - hour</member>

                  <member>m - minute</member>

                  <member>s - second</member>
                </simplelist></entry>
            </row>

            <row>
              <entry>Created</entry>

              <entry>O</entry>

              <entry>Creation date of workflow process definition.</entry>
            </row>

            <row>
              <entry>Description</entry>

              <entry>O</entry>

              <entry>Short textual description of the process.</entry>
            </row>

            <row>
              <entry>Priority</entry>

              <entry>O</entry>

              <entry>The priority of the process type. Default: Inherited from
              Model Definition.</entry>
            </row>

            <row>
              <entry>Limit</entry>

              <entry>O</entry>

              <entry>Expected duration for time management purposes (e.g.
              starting an escalation procedure etc.) in units of DurationUnit.
              It is counted from the starting date/time of the Process. The
              consequences of reaching the limit value are not defined in this
              document (i.e. vendor specific). It is assumed that in this case
              at least the Responsible of the current process is notified of
              this situation.</entry>
            </row>

            <row>
              <entry>Valid From</entry>

              <entry>O</entry>

              <entry>The date that the workflow process definition is active
              from. Empty string means system date. Default: Inherited from
              Model Definition.</entry>
            </row>

            <row>
              <entry>Valid To</entry>

              <entry>O</entry>

              <entry>The date at which the process definition becomes valid.
              Empty string means unlimited validity. Default: Inherited from
              Model Definition.</entry>
            </row>

            <row>
              <entry>Waiting Time</entry>

              <entry>O</entry>

              <entry>Describes the amount of time, which is needed to prepare
              the performance of the task (time estimation) (waiting time is
              provided by the analysis environment and may be updated by the
              runtime environment) in units of DurationUnit.</entry>
            </row>

            <row>
              <entry>Working Time</entry>

              <entry>O</entry>

              <entry>Describes the amount of time the performer of the
              activity needs to perform the task (time estimation) (working
              time is needed for analysis purposes and is provided by the
              evaluation of runtime parameters) in units of
              DurationUnit.</entry>
            </row>

            <row>
              <entry>Duration</entry>

              <entry>O</entry>

              <entry>Expected duration time to perform a task in units of
              DurationUnit.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>In Process Header Tab there is Time Estimation group where we
      define Waiting Time, Working Time and Duration. This is used for
      simulation purposes.</para>

      <table>
        <title>Redefinable Header</title>

        <tgroup cols="3" colsep="1" rowsep="1">
          <colspec align="center" colnum="2"/>

          <thead>
            <row>
              <entry>Name</entry>

              <entry>M/O</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Publication Status</entry>

              <entry>O</entry>

              <entry>Status of the Workflow Process Definition. Default:
              Inherited from Model Definition.<simplelist columns="1">
                  <member>UNDER_REVISION</member>

                  <member>RELEASED</member>

                  <member>UNDER_TEST</member>
                </simplelist></entry>
            </row>

            <row>
              <entry>Author</entry>

              <entry>O</entry>

              <entry>Name of the author of this workflow process definition.
              (the one who puts it into the package)</entry>
            </row>

            <row>
              <entry>Version</entry>

              <entry>O</entry>

              <entry>Version of this workflow process definition.</entry>
            </row>

            <row>
              <entry>Codepage</entry>

              <entry>O</entry>

              <entry>The codepage used for the text parts. Default: Inherited
              from Model Definition.</entry>
            </row>

            <row>
              <entry>Country key</entry>

              <entry>O</entry>

              <entry>Country code based on ISO 3166. It could be either the
              three digits country code number, or the two alpha characters
              country codes. Default: Inherited from Model Definition.</entry>
            </row>

            <row>
              <entry>Responsible(s)</entry>

              <entry>O</entry>

              <entry>Workflow participant, who is responsible for this
              workflow process (usually an Organisational Unit or a Human). It
              is assumed that the supervisor is responsible during execution
              of the process. Default: Inherited from Model
              Definition.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The responsibles for Process are added in the same way as it is at
      Package level, which is explained earlier in text.</para>
    </sect2>

    <sect2 condition="demo-emptytext">
      <title>Workflow Process property panel</title>

      <para>In TWE, you can get the property panel to edit all workflow
      process attributes by clicking on a toolbar icon <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/processproperties.gif"/>
          </imageobject>
        </inlinemediaobject>, or selecting the appropriate menu item.</para>

      <para>It contains a lot of different data about workflow process. All
      information are organized in several tabs: general, process header,
      redefinable header, participants, applications, workflow variables,
      formal parameters, activities, transitions and activity sets.</para>

      <para>All the tabs that will be mentioned can be also displayed as a
      separate property panels, either by selecting appropriate element in a
      Package tree, and asking for its properties, or by selecting appropriate
      toolbox button or menu item.</para>

      <sect3>
        <title>General tab - displays general process data</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/processPropertiesGeneralDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>Tab has two parts.
                First part contains process <emphasis>id</emphasis>,
                <emphasis>name</emphasis> (this name will appear in window's
                title bar) and <emphasis>access level</emphasis> (can be
                private or public). </para><para>Second part shows all process
                extended attributes and also offers operations with
                them.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Process header tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>This dialog defines
                elements and attributes of XPDL's
                <emphasis>ProcessHeader</emphasis> element. </para><para>Field
                <emphasis>Duration unit </emphasis> can have one of the
                following values: second, minute, hour, day, month,
                year.</para><para>Field <emphasis>Created </emphasis>displays
                the process creation date and field
                <emphasis>Description</emphasis> is place for short
                description of this workflow process.</para></entry>

                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/processPropertiesHeaderDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Redefinable header tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/processPropertiesRedefinableDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>Tab has two parts.
                First part contains the following fields:
                <emphasis>Publication status</emphasis> (can have one of the
                following values: under revision, under test, or released),
                <emphasis>Author</emphasis> (author of the process),
                <emphasis>Version</emphasis> (version number for the process),
                <emphasis>Codepage</emphasis> and <emphasis>Country
                key</emphasis>. </para><para>Second part, called
                <emphasis>Responsibles</emphasis>, contains list of all
                responsibles for the process and operations for managing the
                list. </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Participants tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>It contains
                information about all participants of the workflow process.
                Each table row (participant) is described with
                <emphasis>id</emphasis>, <emphasis>name</emphasis> (optional
                value) and <emphasis>participant type</emphasis>. It contains
                toolbar buttons for managing the listed participant elements.
                </para></entry>

                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/processPropertiesParticipantsDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Applications tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/processPropertiesApplicationsDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>It contains
                information about all applications of the workflow process.
                Each table row (application) is described with
                <emphasis>id</emphasis> and <emphasis>name</emphasis>
                (optional value). It contains toolbar buttons for managing the
                listed application elements.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Workflow variables tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>It contains
                information about all workflow process's workflow variables.
                Each table row (workflow variable) is described with
                <emphasis>id</emphasis>, <emphasis>name</emphasis> (optional
                value) and <emphasis>data type</emphasis>. It contains toolbar
                buttons for managing the listed workflow variable elements.
                </para></entry>

                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/processPropertiesVariablesDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Formal parameters tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/processPropertiesFormParamDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>It contains
                information about all workflow process's formal parameters.
                Each table row (formal parameter) is described with
                <emphasis>id</emphasis>, <emphasis>mode</emphasis> and
                <emphasis>data type</emphasis>. It contains toolbar buttons
                for managing the listed formal parameter
                elements.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Activities tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>It contains
                information about all activities of the workflow process. Each
                table row (activity) is described with
                <emphasis>id</emphasis>, <emphasis>name</emphasis> (optional
                value) and <emphasis>performer </emphasis>(optional value). It
                contains toolbar buttons for managing the listed activity
                elements.</para></entry>

                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/processPropertiesActivitiesDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Transitions tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/processPropertiesTransitionsDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>It contains
                information about all workflow process's transitions. Each
                table row (transition) is described with
                <emphasis>id</emphasis>, from (source), to (target) and
                <emphasis>condition</emphasis> (optional value). It contains
                toolbar buttons for managing the listed transition
                elements.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Activity sets tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>It contains
                information about all activity sets of the workflow process.
                Each table row (activity set) is described with
                <emphasis>id</emphasis>, <emphasis>activities</emphasis> and
                <emphasis>transitions</emphasis>. It contains toolbar buttons
                for managing the listed activity set elements.</para></entry>

                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/processPropertiesActivitySetsDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>
    </sect2>
  </sect1>

  <sect1>
    <title>Swimlanes (Pools and Lanes)</title>

    <para>Swimlanes are used to facilitate the graphical layout of a
    collection of processes and the activities they contain. They may
    designate participant information at the process level and performer
    information at the activity level. The Swimlane structure is depicted by a
    collection of non-overlapping rectangles called Pools. Each Pool may be
    further subdivided into a number of Lanes.</para>

    <informaltable frame="none" rowsep="0">
      <tgroup cols="2" colsep="0">
        <tbody>
          <row>
            <entry colsep="0" valign="middle"><mediaobject>
                <imageobject>
                  <imagedata contentdepth="100%"
                             fileref="Images/pool_horizontal.jpg" scalefit="1"
                             valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>

            <entry valign="middle"><mediaobject>
                <imageobject>
                  <imagedata contentdepth="100%"
                             fileref="Images/pool_vertical.jpg" scalefit="1"
                             valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <sect2>
      <title>Pools</title>

      <informaltable frame="none" rowsep="0">
        <tgroup cols="2" colsep="0">
          <tbody>
            <row>
              <entry><mediaobject>
                  <imageobject>
                    <imagedata contentdepth="100%"
                               fileref="Images/poolPropertiesDialog.gif"
                               scalefit="1" valign="middle" width="100%"/>
                  </imageobject>
                </mediaobject></entry>

              <entry colsep="0" valign="middle"><para>A Pool acts as the
              container for flow objects (activities and artifacts) and
              Sequence Flow (transitions and associations) between them.
              </para><para>Together Workflow Editor does not allow users to
              create or remove a pool. Pool is automatically being created or
              deleted whenever workflow process gets created/deleted.
              </para><para>The property panel for the pool shows the pool
              attributes which are editable, except the text field that
              displays the Id of referenced Workflow Process/Activity Set, and
              has only the link button to display the properties of the
              referenced Workflow Process/Activity Set.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2>
      <title>Lanes</title>

      <para>Lanes are used to subdivide a Pool. All the activities within a
      Lane may inherit one or more properties from the Lane. A typical use of
      this is to give the Lanes "role names" and have the Activities inherit
      these role names as "Participant assignment/Performer
      expressions".</para>

      <informaltable frame="none" rowsep="0">
        <tgroup cols="2" colsep="0">
          <tbody>
            <row>
              <entry><mediaobject>
                  <imageobject>
                    <imagedata contentdepth="100%"
                               fileref="Images/lanePropertiesDialog.gif"
                               scalefit="1" valign="middle" width="100%"/>
                  </imageobject>
                </mediaobject></entry>

              <entry colsep="0" valign="middle"><para>Together Workflow Editor
              does not allow users to create lanes using properties dialogs.
              The only way to create or delete a lane is by using TWE's Graph
              component. Lane is always being created as a representation of
              the Participant. Lanes are implicitly created whever user wants
              to insert a lane representation for the existing or a new
              participant into the graph. When activity is put into the lane
              (using graph component), the activity's performer becomes the
              participant which is a representation for that particular
              lane.</para><para>As described in <xref
              linkend="graphcomponent"/> , TWE also alows nesting of
              lanes.</para><para>The property dialog of the lane shows lane
              properties Id, Name, Performers and Nested Lanes. The Id and the
              name are editable fields. The performer of the lane is also
              editable. You can change the performer of the lane to link it
              with an another participant, or you can write your own
              expression for the performer. which are editable (including a
              performer of the lane), but you can not add or the remove the
              performer of the lane. The Nested Lanes can't be added or
              removed as well (it is possible only through the Graph
              component).</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
  </sect1>

  <sect1>
    <title>External References</title>

    <para>External package concept allows you to re-use common Participant,
    Application and WorkflowProcess definitions contained within other Package
    definitions. You just need to define these common entities ones, and store
    it within a XPDL file, and then re-use it afterwards in all other XPDLs
    you create</para>

    <para>TWE provides possibility of referencing external Packages. After
    referencing it, automatically, every participant, application, type
    declaration or workflow process defined there in will be accessible from
    the main package.</para>

    <para>If external package we referenced also contains the references to
    other external packages, all of the package references will be imported in
    TWE in read-only mode.</para>

    <para>TWE's <emphasis>External package relations component</emphasis> will
    show the relations of the main package external packages, their external
    packages, and so on.</para>

    <sect2>
      <title>Adding External Packages</title>

      <informaltable frame="none">
        <tgroup cols="2" colsep="0">
          <tbody>
            <row>
              <entry align="justify" valign="middle"><para>This dialog appears
              when you press the package toolbar button, or Package menu item
              for adding external packages <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="Images/externalpackagesadd.gif"/>
                  </imageobject>
                </inlinemediaobject>. It enables you to select the XPDL file
              from your disk, and to reference it as an external package for
              the package you are currently editing. As already mentioned,
              after adding external package, you are able to use participants,
              applications and workflow processes defined in that
              package.</para><para>NOTE: You can't add external package if the
              main XPDL package you are working on is not yet saved to the
              disc.</para></entry>

              <entry align="justify" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata contentdepth="100%"
                               fileref="Images/extPackageAddDialog.gif"
                               scalefit="1" valign="middle" width="100%"/>
                  </imageobject>
                </mediaobject></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2>
      <title>Removing External Packages</title>

      <para>Action <emphasis>Remove external packages</emphasis>
      <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/externalpackagesremove.gif"/>
          </imageobject>
        </inlinemediaobject> from the toolbox, or External packages menu
      removes external package from the current package.</para>

      <para>If this external package is not referenced by any other external
      package of the main package, it will be really removed from TWE's
      memory. In the case some of the elements from this external packages are
      in use (Applications, Participants or WorkflowProcesses), you'll be
      asked for the confirmation.</para>

      <informaltable frame="none">
        <tgroup cols="2" colsep="0">
          <tbody>
            <row>
              <entry align="center" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata contentdepth="100%"
                               fileref="Images/ExtPackDeleteWarning.gif"
                               scalefit="1" width="100%"/>
                  </imageobject>
                </mediaobject></entry>

              <entry align="justify" valign="middle"><para>The external
              package mechanism allows packages and its elements
              (applications, processes and participants) to be multiple
              referenced.</para><para>Before the removement of the selected
              external package, if it contains any element that is referenced,
              and the external package reference that will be deleted is the
              last one, the warning message about removement of the external
              package is displayed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2>
      <title>External Participants</title>

      <para condition="demo-details">To get the following dialog, click button
      <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/externalparticipants.gif"/>
          </imageobject>
        </inlinemediaobject> (or appropriate menu item from External Packages
      menu).</para>

      <informaltable condition="demo-emptytext" frame="none">
        <tgroup cols="2" colsep="0">
          <tbody>
            <row>
              <entry align="justify" valign="middle"><para>This dialog shows
              all participants of package's external packages. Every external
              participant is presented with its <emphasis>Id</emphasis>,
              <emphasis>Name</emphasis> (optional data), <emphasis>Participant
              Type</emphasis> and <emphasis>Description</emphasis> (optional
              data).</para></entry>

              <entry align="justify" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata contentdepth="100%"
                               fileref="Images/participantsExternalDialog.gif"
                               scalefit="1" width="100%"/>
                  </imageobject>
                </mediaobject></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2>
      <title>External Processes</title>

      <para condition="demo-details">To get the following dialog, click button
      <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/externalprocesses.gif"/>
          </imageobject>
        </inlinemediaobject> (or appropriate menu item from External Packages
      menu).</para>

      <informaltable condition="demo-emptytext" frame="none">
        <tgroup cols="2" colsep="0">
          <tbody>
            <row>
              <entry align="justify" valign="middle"><para>This dialog shows
              all workflow processes of package's external packages. Every
              external process is presented with its <emphasis>Id</emphasis>,
              <emphasis>Name</emphasis> (optional data) and Access level
              (optional data).</para></entry>

              <entry align="justify" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata contentdepth="100%"
                               fileref="Images/processesExternalDialog.gif"
                               width="100%"/>
                  </imageobject>
                </mediaobject></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2>
      <title>External Applications</title>

      <para condition="demo-details">To get the following dialog, click button
      <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/externalapplications.gif"/>
          </imageobject>
        </inlinemediaobject> (or appropriate menu item from External Packages
      menu).</para>

      <informaltable condition="demo-emptytext" frame="none">
        <tgroup cols="2" colsep="0">
          <tbody>
            <row>
              <entry align="justify" valign="middle"><para>This dialog shows
              all applications of package's external packages. Every external
              application is presented with its <emphasis>Id</emphasis>,
              <emphasis>Name</emphasis> (optional data) and
              <emphasis>Description</emphasis> (optional data).</para></entry>

              <entry align="justify" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata contentdepth="100%"
                               fileref="Images/applicationsExternalDialog.gif"
                               scalefit="1" width="100%"/>
                  </imageobject>
                </mediaobject></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2>
      <title>External Type Declarations</title>

      <para condition="demo-details">To get the following dialog, click button
      <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/externaltypedeclarations.gif"/>
          </imageobject>
        </inlinemediaobject> (or appropriate menu item from External Packages
      menu).</para>

      <informaltable condition="demo-emptytext" frame="none">
        <tgroup cols="2" colsep="0">
          <tbody>
            <row>
              <entry align="justify" valign="middle"><para>This dialog shows
              all type declarations of package's external packages. Every
              external type declaration is presented with its
              <emphasis>Id</emphasis>, <emphasis>Name</emphasis> (optional
              data) and <emphasis>Description</emphasis> (optional
              data).</para></entry>

              <entry align="justify" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata contentdepth="100%"
                               fileref="Images/typedeclarationsExternalDialog.jpg"
                               scalefit="1" width="100%"/>
                  </imageobject>
                </mediaobject></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
  </sect1>

  <sect1>
    <title>Type Declaration</title>

    <para>WfMC assumes a number of standard data types (string, reference,
    integer, float, date/time, etc.); such data types are relevant to workflow
    relevant data, system or environmental data or participant data.
    Expressions may be formed using such data types to support conditional
    evaluations.</para>

    <para>Sometimes set of data types that XPDL provides won't be enough, or
    you want to represent some data type with a special name to easily use it
    when defining Formal/Actual parameters. This XPDL feature allows you to
    declare new data type.</para>

    <para>Attributes for TypeDeclaration are:</para>

    <table condition="demo-details">
      <title>Type Declaration</title>

      <tgroup cols="3" colsep="1" rowsep="1">
        <colspec align="center" colname="col0" colnum="1"/>

        <colspec colname="col02" colnum="2" colwidth="2.00*"/>

        <colspec colname="col2" colnum="3" colwidth="1*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry align="center">M/O</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry colname="col0">Id</entry>

            <entry align="center" colname="col02">M</entry>

            <entry colname="col2">Used to identify the declared data
            type.</entry>
          </row>

          <row>
            <entry>Name</entry>

            <entry align="center">O</entry>

            <entry>Text used to identify the Declared Data Type.</entry>
          </row>

          <row>
            <entry>Description</entry>

            <entry align="center">O</entry>

            <entry>Short textual description of the Declared Data
            Type.</entry>
          </row>

          <row>
            <entry>Data Types</entry>

            <entry align="center">O</entry>

            <entry>Standard data types.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <informaltable condition="demo-emptytext" frame="none">
      <tgroup cols="2" colsep="0">
        <tbody>
          <row>
            <entry><mediaobject>
                <imageobject>
                  <imagedata align="left" contentdepth="100%"
                             fileref="Images/TypeDeclarationDialog.jpg"
                             scalefit="1" valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>

            <entry align="justify" valign="middle"><para>This property panel
            shows an example of a type declaration.</para><para>This panel can
            be get e.g. by selecting an existing TypeDeclaration in a Package
            tree, and asking for its properties. To create a new
            TypeDeclaration, you can press button <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="Images/typedeclarations.gif"/>
                </imageobject>
              </inlinemediaobject> which will bring you the property panel
            with all defined Type declarations for the package. There in, you
            can press a button for creating new Type
            declaration.</para><para>TWE maintains all of WfMC data types that
            are provided: BasicType, DeclaredType, ShemaType,
            ExternalReference, RecordType, UnionType, EnumerationType and
            ArrayType.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para condition="demo-emptytext">The following table describes the basic
    data type:</para>

    <table condition="demo-emptytext">
      <title>Basic Data Type</title>

      <tgroup cols="3" colsep="1" rowsep="1">
        <colspec align="center" colnum="2"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry align="center">M/O</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Type</entry>

            <entry align="center">M</entry>

            <entry><simplelist columns="1">
                <member>STRING</member>

                <member>FLOAT</member>

                <member>INTEGER</member>

                <member>REFERENCE</member>

                <member>DATETIME</member>

                <member>BOOLEAN</member>

                <member>PERFORMER</member>
              </simplelist></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para condition="demo-emptytext">External Reference data type has the
    following attributes:</para>

    <table condition="demo-emptytext" frame="all">
      <title>External Reference</title>

      <tgroup cols="3">
        <thead>
          <row>
            <entry>Name</entry>

            <entry align="center">M/O</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Xref</entry>

            <entry>O</entry>

            <entry>It specifies the identity of the entity within the external
            document.</entry>
          </row>

          <row>
            <entry>Location</entry>

            <entry>M</entry>

            <entry>It specifies the URI of the document that defines the
            type.</entry>
          </row>

          <row>
            <entry>Namespace</entry>

            <entry>O</entry>

            <entry>It allows specification of the scope in which the entity is
            defined.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para condition="demo-emptytext">Using External Reference data type you
    may define e.g. some Java class as a new data type (for e.g.
    <filename>location = "com.abc.purchases.PO"</filename>).</para>
  </sect1>

  <sect1 xml:id="Package_Participants">
    <title>Workflow Participant</title>

    <para condition="demo-details">WfMC Meta-Model specification defines a
    simple in-built (Minimal) Organisational Model or permits access to an
    externally defined OM. Participants in TWE are just part of an
    Organisational Model - Minimal OM. The connection with the Organisational
    Model is used in Activity Definition (performer of an activity) and in the
    Process Definition (responsible of a process).</para>

    <para condition="demo-emptytext">Workflow Participants have a scope and
    visibility equivalent to extended attributes. All referenced Workflow
    Participants have to be defined in the scope where they are used, at least
    in the same package.</para>

    <para condition="demo-emptytext">The Workflow Participant is defined by a
    type and related information, which is a set of type specific attributes.
    This definition contains a basic set of 6 Workflow Participant types:
    <emphasis>resource set, resource, organizational unit, role,
    human,</emphasis> or <emphasis>system</emphasis>. A role and a resource
    are used in the sense of abstract actors. This definition is an
    abstraction level between the real performer and the activity, which has
    to be performed. During run time these abstract definitions are evaluated
    and assigned to concrete human(s) and/or program(s).</para>

    <para condition="demo-emptytext">These attributes are used to define a
    Workflow Participant:</para>

    <table condition="demo-emptytext" frame="all">
      <title>Workflow Participant</title>

      <tgroup cols="3">
        <thead>
          <row>
            <entry>Name</entry>

            <entry align="center">M/O</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Id</entry>

            <entry align="center">M</entry>

            <entry>Used to identify the workflow participant
            definition.</entry>
          </row>

          <row>
            <entry>Participant Name</entry>

            <entry align="center">O</entry>

            <entry>Text used to identify a performer.</entry>
          </row>

          <row>
            <entry>Participant Type</entry>

            <entry align="center">M</entry>

            <entry>Definition of the type of workflow participant entity. Type
            of a workflow participant.</entry>
          </row>

          <row>
            <entry>Participant Description</entry>

            <entry align="center">O</entry>

            <entry>Short textual description of a workflow
            participant.</entry>
          </row>

          <row>
            <entry>External Reference</entry>

            <entry align="center">O</entry>

            <entry>A reference to an external specification of a
            participant.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para condition="demo-emptytext">The Participant entity type attribute
    characterizes the participant to be an individual, an organisational unit
    or an abstract resource such as a machine. Here is a list of possible
    participant types:</para>

    <table condition="demo-emptytext" frame="all">
      <title>Participant Types</title>

      <tgroup cols="2">
        <colspec colname="col1" colnum="1" colwidth="1.00*"/>

        <colspec colname="col2" colnum="2" colwidth="1.68*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry colname="col2">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>RESOURCE_SET</entry>

            <entry colname="col2">A set of resources.</entry>
          </row>

          <row>
            <entry>RESOURCE</entry>

            <entry colname="col2">A specific resource agent (as a
            machine).</entry>
          </row>

          <row>
            <entry>ROLE</entry>

            <entry colname="col2">This type allows performer addressing by a
            role or skill set. A role in this context is a function a human
            has within an organization. As a function isn't necessarily
            unique, a coordinator may be defined (for administrative purposes
            or in case of exception handling) and a list of humans the role is
            related to.</entry>
          </row>

          <row>
            <entry>ORGANIZATIONAL_UNIT</entry>

            <entry colname="col2">A department or any other unit within an
            organizational model.</entry>
          </row>

          <row>
            <entry>HUMAN</entry>

            <entry colname="col2">A human interacting with the system via an
            application presenting a user interface to the
            participant.</entry>
          </row>

          <row>
            <entry>SYSTEM</entry>

            <entry colname="col2">An automatic agent.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para condition="demo-emptytext">TWE provides the way to define
    participants at Package level and at Process Definition level. In order to
    do that, you can select appropriate toolbar button or menu item for
    showing all the participants defined at package/process level. This will
    bring a table property panel, where you'll have a button for creating a
    new participant.</para>

    <informaltable condition="demo-emptytext" frame="none">
      <tgroup cols="2" colsep="0">
        <tbody>
          <row>
            <entry><mediaobject>
                <imageobject>
                  <imagedata align="left" contentdepth="100%"
                             fileref="Images/participantNewDialog.gif"
                             scalefit="1" valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>

            <entry align="justify" valign="middle"><para>You are able to
            insert the lanes representing all the defined participants into a
            TWE graph using the following choice button <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="Images/lanesselect.gif"/>
                </imageobject>
              </inlinemediaobject> from graph's toolbar , and it'll be
            represented as a new swim-lane in a graph. Then, you can put the
            activities (and artifacts) in there, which actually means that
            activity's performer is the participant represented by the
            swim-lane.</para><para>Even if you do not define any participant,
            TWE's graph component has special lanes that can be used to define
            activity's performer as an expression (can be created by toolbar
            buttons <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="Images/freetextlane.png"/>
                </imageobject>
              </inlinemediaobject> and <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="Images/commonexplane.png"/>
                </imageobject>
              </inlinemediaobject>). </para><para>All the activities which
            performer is not a reference to an existing Participant will be
            graphically displayed inside those special graph
            swim-lanes.</para><para>There is another way of defining Package
            level Participants, and this is by using a Graph's toolbox button.
            Pressing this button <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="Images/lane.gif"/>
                </imageobject>
              </inlinemediaobject>, and than clicking in the graph will
            automatically add another participant represented as a new
            swim-lane in currently selected WorkflowProcess's graph. This
            participant's type will be Role, and you can change it through the
            property panel.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1 xml:id="Package_Application">
    <title>Workflow Application</title>

    <para condition="demo-details">These are some of the attributes for
    application entity which are defined by WfMC specification:</para>

    <table condition="demo-emptytext" frame="all">
      <title>General attributes</title>

      <tgroup align="left" cols="3" colsep="1" rowsep="1">
        <colspec align="center" colnum="2" colwidth="1.00*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry align="center">M/O</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Id</entry>

            <entry align="center">M</entry>

            <entry>Used to identify the workflow application
            definition.</entry>
          </row>

          <row>
            <entry>Name</entry>

            <entry align="center">M</entry>

            <entry>Text used to identify an application (may be interpreted as
            a generic name of the tool).</entry>
          </row>

          <row>
            <entry>Description</entry>

            <entry align="center">O</entry>

            <entry>Short textual description of the application.</entry>
          </row>

          <row>
            <entry>Extended attributes</entry>

            <entry align="center">O</entry>

            <entry>Optional extensions to meet individual implementation
            needs.</entry>
          </row>

          <row>
            <entry>Invocation Parameters</entry>

            <entry align="center">O</entry>

            <entry>Parameters that are interchanged with the application via
            the invocation interface.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <informaltable condition="demo-emptytext" frame="none">
      <tgroup cols="2" colsep="0">
        <tbody>
          <row>
            <entry align="justify" valign="middle"><para>There is more than
            one way of getting <emphasis>Workflow Application
            Declaration</emphasis> settings. One way would be choosing an icon
            <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="Images/packageapplications.gif"/>
                </imageobject>
              </inlinemediaobject> at main toolbar. Another way would be
            selecting Package's <emphasis>Applications</emphasis> in a Package
            tree component, and then right clicking and selecting Properties
            action (or directly selecting this action from Edit
            menu).</para><para>User can create new instance for application
            entity, edit some existing application or delete it (modification
            and deletion of application entity is not allowed if it is the
            entity from externally referenced package). The picture on the
            right shows a property panel for editing application
            attributes.</para><para>Workflow applications that are defined for
            the package are accessible by any activity that is defined at any
            package's workflow process.</para><para>When defining a Tool for
            an activity, you'll be able to chose amongst all applications
            defined inside the particular WorkflowProcess definition, Package
            definition, or inside definition of the Package's external
            packages. If the application from the process level has the same
            Id as the one from the package level (it overrides the one from
            the package level), the one from the package level won't be
            displayed. The same stands for overriding the application from
            external package.</para></entry>

            <entry align="justify" valign="middle"><mediaobject>
                <imageobject>
                  <imagedata contentdepth="100%"
                             fileref="Images/applicationNewDialog.gif"
                             scalefit="1" valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para condition="demo-emptytext">As it is shown on the picture, there are
    two choices for Invocation Parameters:</para>

    <itemizedlist condition="demo-emptytext">
      <listitem>
        <para>Formal Parameters and</para>
      </listitem>

      <listitem>
        <para>External Reference</para>
      </listitem>
    </itemizedlist>

    <sect2 xml:id="Formal_Parameters">
      <title>Formal Parameters</title>

      <informaltable condition="demo-details" frame="none">
        <tgroup cols="2" colsep="0">
          <tbody>
            <row>
              <entry valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata align="left" contentdepth="100%"
                               fileref="Images/formalParametersDialog.gif"
                               scalefit="1" valign="middle" width="100%"/>
                  </imageobject>
                </mediaobject></entry>

              <entry align="justify" valign="middle"><para>Formal Parameters
              are parameters that are interchanged with the application via
              the invocation interface. They are passed during invocation and
              returned of control (e.g. of an invoked application or invoked
              sub-process). </para><para>The order of formal parameters can be
              changed by dragging an item with the mouse.</para><para>Using
              appropriate toolbar buttons, you can create a new
              FormalParameter, edit, delete or duplicate selected one, as well
              as to get all the references to the selected
              FormalParameter.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para condition="demo-emptytext">The attributes that define Formal
      Parameter are:</para>

      <table condition="demo-emptytext" frame="all">
        <title>Formal Parameter</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>

              <entry align="center">M/O</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Id</entry>

              <entry>M</entry>

              <entry>Identifier for the parameter</entry>
            </row>

            <row>
              <entry>Mode</entry>

              <entry>M</entry>

              <entry><itemizedlist>
                  <listitem>
                    <para>IN Input Parameters</para>
                  </listitem>

                  <listitem>
                    <para>OUT Output Parameters</para>
                  </listitem>

                  <listitem>
                    <para>INOUT Parameters used as input and output</para>
                  </listitem>
                </itemizedlist></entry>
            </row>

            <row>
              <entry>Name</entry>

              <entry>O</entry>

              <entry>Name of the parameter</entry>
            </row>

            <row>
              <entry>Is Array</entry>

              <entry>O</entry>

              <entry>If it is an array type</entry>
            </row>

            <row>
              <entry>Data Type</entry>

              <entry>O</entry>

              <entry>Data type of the formal parameter</entry>
            </row>

            <row>
              <entry>Initial value</entry>

              <entry>O</entry>

              <entry>Initial value for parameter</entry>
            </row>

            <row>
              <entry>Description</entry>

              <entry>O</entry>

              <entry>Textual description of the formal parameter</entry>
            </row>

            <row>
              <entry>Length</entry>

              <entry align="center">O</entry>

              <entry>The length of the data.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>

    <sect2 xml:id="External_Reference">
      <title>External Reference</title>

      <para condition="demo-details">An External Reference can be used instead
      of formal parameters. External Reference is a reference to an external
      definition of an entity.</para>

      <para condition="demo-emptytext">External Reference has the following
      attributes:</para>

      <table condition="demo-emptytext" frame="all">
        <title>External Reference</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry>Name</entry>

              <entry align="center">M/O</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>Xref</entry>

              <entry>O</entry>

              <entry>It specifies the identity of the entity within the
              external document.</entry>
            </row>

            <row>
              <entry>Location</entry>

              <entry>M</entry>

              <entry>It specifies the URI of the document that defines the
              type.</entry>
            </row>

            <row>
              <entry>Namespace</entry>

              <entry>O</entry>

              <entry>It allows specification of the scope in which the entity
              is defined.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para condition="demo-emptytext">With External Reference, Application
      (and some other entities) may be defined by XML schema (for e.g.
      <filename>location = http://abc.com/schemas/po.xsd</filename>), by a
      Java class (for e.g. <filename>location =
      "com.abc.purchases.PO"</filename>), by WSDL document (for e.g.
      <filename>location =
      "http://abc.com/services/poService.wsdl"</filename>)...</para>
    </sect2>
  </sect1>

  <sect1 xml:id="Package_RelevanData">
    <title>Workflow Relevant Data</title>

    <para condition="demo-details">Workflow Relevant Data (or, in XPDL, Data
    Field) represent the variables of a Process Definition or Package
    Definition. They are typically used to maintain decision data (used in
    conditions) or reference data values (parameters), which are passed
    between activities or sub-processes. The workflow relevant data list
    defines all data objects, which can be used within the workflow process.
    The attribute <literal>TYPE</literal> explicitly specifies all information
    needed for a workflow management system to define an appropriate data
    object for storing data, which is to be handled, by an active instance of
    the workflow process.</para>

    <para condition="demo-emptytext">Workflow Relevant Data can be defined in
    a Workflow Process (the Workflow Process Relevant Data) and in a Package
    (the Package Relevant Data). The scopes differ in that the former may only
    be accessed by entities defined inside that process, while the latter may
    be accessed by entities inside any process defined within that
    model.</para>

    <para condition="demo-emptytext">Workflow Relevant Data has a scope that
    is defined by the directly surrounding meta-model entity and is not
    nested. The visibility of its identifier is also defined by that
    entity.</para>

    <para condition="demo-emptytext">Attributes of Workflow Relevant Data
    are:</para>

    <table condition="demo-emptytext" frame="all">
      <title>Relevant Data</title>

      <tgroup cols="3">
        <colspec colname="col01" colnum="1" colwidth="2.00*"/>

        <colspec colname="col1" colnum="2" colwidth="1*"/>

        <colspec colname="col03" colnum="3" colwidth="2.00*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry align="center">M/O</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry colname="col01">Id</entry>

            <entry align="center" colname="col1">M</entry>

            <entry colname="col03">Used to identify the workflow relevant
            data.</entry>
          </row>

          <row>
            <entry>Data Type(s)</entry>

            <entry align="center">M</entry>

            <entry>Data Type.</entry>
          </row>

          <row>
            <entry>Name</entry>

            <entry align="center">O</entry>

            <entry>Text used to identify the workflow relevant data.</entry>
          </row>

          <row>
            <entry>Is Array</entry>

            <entry align="center">O</entry>

            <entry>Indicates if it is an array.</entry>
          </row>

          <row>
            <entry>Initial Value</entry>

            <entry align="center">O</entry>

            <entry>Pre-assignment of data for run time.</entry>
          </row>

          <row>
            <entry>Length</entry>

            <entry align="center">O</entry>

            <entry>The length of the data.</entry>
          </row>

          <row>
            <entry>Description</entry>

            <entry align="center">O</entry>

            <entry>Short textual description of the defined data.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para condition="demo-emptytext">When parameters are passed to a called
    subflow outside the current model definition, it is the responsibility of
    the <markup>process designer(s)</markup> to ensure that data type
    compatibility exists across the parameter set.</para>

    <para condition="demo-emptytext">Workflow relevant data naming must be
    unique within a process model. If such data is passed between processes as
    parameters, the convention at this version of specification is that copied
    semantics will be used. Responsibility rests with process designers /
    administrators to ensure consistent name / datatype usage within process
    definitions / models to support sub-flow operations (including any
    required remote process interoperability).</para>

    <para>There is an icon <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/packageworkflowrelevantdata.gif"/>
        </imageobject>
      </inlinemediaobject> in Package's part of the Toolbar and icon
    <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/processworkflowrelevantdata.gif"/>
        </imageobject>
      </inlinemediaobject> in process's part of the toolbar, and also on
    appropriate menus, for displaying all workflow relevant data for the
    selected Package/WorkflowProcess.</para>

    <informaltable condition="demo-details" frame="none">
      <tgroup cols="2" colsep="0">
        <tbody>
          <row>
            <entry valign="middle"><mediaobject>
                <imageobject>
                  <imagedata align="left" contentdepth="100%"
                             fileref="Images/wfVariableNewDialog.gif"
                             scalefit="1" valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>

            <entry align="justify" valign="middle"><para>Like other similar
            table property panels, amongst others, there are also buttons
            "New" and "Edit" for adding new or editing existing Workflow
            Relevant Data. The picture on the left shows property panel for
            editing Workflow Relevant Data.</para><para>When defining (or
            editing) an workflow variable, the following attributes can be
            set: <emphasis>id</emphasis> (mandatory attribute),
            <emphasis>name</emphasis>, <emphasis>initial value ,
            <emphasis>length</emphasis></emphasis>,
            <emphasis>IsArray</emphasis> (array indicator),
            <emphasis>Type</emphasis>, d<emphasis>escription</emphasis> and
            <emphasis>extended attributes</emphasis>.</para><para>The
            attribute <emphasis>Type</emphasis> explicitly specifies all
            information needed for a workflow management system to define an
            appropriate data object for storing data, which is to be handled,
            by an active instance of the workflow process.</para><para>If you
            are at process level, and you create (override) some workflow
            relevant data with the same Id as the one from the package level,
            only one of them (the one from the process level) can be used as a
            reference from other entities. E.g. you can choose just the one
            from the process level to be the actual parameter for some
            application or subflow.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1>
    <title>Formal Parameters</title>

    <informaltable condition="demo-details" frame="none">
      <tgroup cols="2" colsep="0">
        <tbody>
          <row>
            <entry valign="middle"><mediaobject>
                <imageobject>
                  <imagedata align="left" contentdepth="100%"
                             fileref="Images/FormalParameterDialog.jpg"
                             scalefit="1" valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>

            <entry align="justify" valign="middle"><para>Formal Parameters are
            parameters that are interchanged with the application via the
            invocation interface. They are passed during invocation and return
            of control (e.g. an invoked application or invoked sub-process).
            </para><para>Every formal parameter is presented with its
            <emphasis>Id</emphasis>, <emphasis>Mode</emphasis>, <emphasis>Data
            type and Description</emphasis>.</para><para>To add new
            FormalParameter for the process, you can click on the button
            <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="Images/processformalparameters.gif"/>
                </imageobject>
              </inlinemediaobject> (the right-most button in the toolbar).
            This will bring you a table property panel with a list of all
            FormalParameters already defined for the selected process. There
            is a New button there in, which will create a new FormalParameter,
            and will bring a property panel for edit it.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1 xml:id="Package_ExtendedAttributes">
    <title>Extended Attributes</title>

    <para>XPDL contains most of the entities, which are likely to be required
    in the process definition modelling. Sometimes, there is a need for some
    additional information (user or vendor specific). Extended Attributes are
    the primary method to support such extensions. These are attributes
    defined by the user or vendor, where necessary, to express any additional
    entity characteristics.</para>

    <informaltable condition="demo-details" frame="none">
      <tgroup cols="2" colsep="0">
        <tbody>
          <row>
            <entry valign="middle"><mediaobject>
                <imageobject>
                  <imagedata align="left" contentdepth="100%"
                             fileref="Images/extendedAttributeDialog.jpg"
                             scalefit="1" valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>

            <entry align="justify" valign="middle"><para>TWE provides use of
            the Extended Attributes like follows: you can define "simple" part
            of Extended Attribute by entering <emphasis>Name</emphasis> and
            <emphasis>Value</emphasis> attributes. If you want to define
            "complex" part of Extended Attribute, which could be consisted of
            tags that belong to the XPDL or some other namespace, you have to
            enter it as a free-text in the <emphasis>Complex
            content</emphasis> field.</para><para>The picture on the left
            shows property panel representing extended
            attribute.</para><para>When defining new ExtendedAttribute (or
            modifying one already defined), user has possibility to choose its
            name amongst the names of extended attributes already defined for
            that element type (Activity, Participant, ...). The list of names
            depends on the names already defined in opened XPDL (and its
            externally referenced XPDLs). The list of names is refreshed each
            time new ExtendedAttribute is being added or when one already
            defined is being re-defined or deleted.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1>
    <title>Activity Set</title>

    <para condition="demo-details">An activity set is a self-contained set of
    activities and transitions. Transitions in the set should refer only to
    activities in the same set and there should be no transitions into or out
    of the set. Activity sets can be executed by block activities.</para>

    <informaltable condition="demo-emptytext" frame="none" rowsep="0">
      <tgroup cols="2" colsep="0">
        <tbody>
          <row>
            <entry colsep="0" valign="middle"><para>Typically, you will create
            a new activity set in the WorkflowProcess using Graph component's
            toolbar icon <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="Images/activityset.gif"/>
                </imageobject>
              </inlinemediaobject> for doing that. Previously you must insure
            that the graph for the WorkflowProcess where you want to insert
            the activity set is visible.</para><para>The picture on the right
            shows property panel for editing ActivitySet.</para><para>Every
            activity set is presented with its <emphasis>Id</emphasis>,
            <emphasis>activities</emphasis> (number of activities in the
            activity set) and <emphasis>transitions</emphasis> (number of
            transitions in the activity set).</para><para>As you can see,
            there is only one attribute to define, and that is the Id. There
            are two tables where you can see short description of all
            activities and transitions already defined for this ActivitySet.
            As with other table panels, you are able to manage
            them.</para></entry>

            <entry valign="middle"><mediaobject>
                <imageobject>
                  <imagedata contentdepth="100%"
                             fileref="Images/activitySetDialog.gif"
                             scalefit="1" valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1 xml:id="Process_Activity">
    <title>Activity</title>

    <para>Generally, any process comprises a number of steps, which lead
    towards the overall goal. Workflow process consists of a number of
    workflow activities. The workflow activity is a piece of work that will be
    done by combination of resources and computer applications.</para>

    <table>
      <title>Activity attributes</title>

      <tgroup cols="3" colsep="1" rowsep="1">
        <colspec align="center" colname="col0" colnum="1" colwidth="2.33*"/>

        <colspec colname="col02" colnum="2" colwidth="1.00*"/>

        <colspec colname="col2" colnum="3" colwidth="6.04*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry align="center" colname="col02">M/O</entry>

            <entry colname="col2">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Name</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">Text used to identify process
            activity.</entry>
          </row>

          <row>
            <entry colname="col0">Performers</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">Link to entity workflow participant. May be
            an expression. Default: Any Participant.</entry>
          </row>

          <row>
            <entry colname="col0">Start mode</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">Describes how the execution of an Activity
            is triggered.</entry>
          </row>

          <row>
            <entry colname="col0">Finish mode</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">Describes how the system operates at the end
            of the Activity.</entry>
          </row>

          <row>
            <entry colname="col0">Deadline</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">Specification of a deadline and action to be
            taken if it is reached.</entry>
          </row>

          <row>
            <entry colname="col0">Priority</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">A value that describes the initial priority
            of this activity when the execution starts. If this attribute is
            not defined but a priority is defined in the Process definition
            then that is used. By default it is assumed that the priority
            levels are the natural numbers starting with zero, and that the
            higher the value the higher the priority (e.g.: 0, 1,
            ...).</entry>
          </row>

          <row>
            <entry colname="col0">Limit</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">Expected duration for time management
            purposes (e.g. starting an escalation procedure etc.) in units of
            DurationUnit. It is counted from the starting date/time of the
            Process. The consequences of reaching the limit value are not
            defined in this document (e.g. vendor specific).</entry>
          </row>

          <row>
            <entry colname="col0">Icon</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">Address (path- and filename) for an icon to
            represent the activity.</entry>
          </row>

          <row>
            <entry colname="col0">Documentation</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">The address (e.g. path - and filename) for a
            help file or a description file of the activity.</entry>
          </row>

          <row>
            <entry>Description</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">Textual description of the activity.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Activities are associated with their performers (which are workflow
    participants), and application assignments. Optional information about
    activity may be associated with: starting and stopping manner, usage of
    specific workflow relevant data, preconditions for starting and
    postconditions for finishing the activity.</para>

    <para>The following diagram illustrates the generic structure of
    activities:</para>

    <figure>
      <title>Generic Structure of Activities</title>

      <mediaobject>
        <imageobject>
          <imagedata contentdepth="100%"
                     fileref="Images/Process_Activity_Structures.gif"
                     scalefit="1" width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Activities and other activity-like objects are inserted using
    buttons on graph's "Toolbox" toolbar.</para>

    <sect2 xml:id="Activity_Atomic">
      <title>Activities and Graph component</title>

      <para>Although it is possible to create a new activity through the
      property panels, the usual way to do it is through the graph
      component.</para>

      <para>The following table shows the picture of how the graph represents
      a certain XPDL activity type, and short description of each type of the
      activity:</para>

      <informaltable frame="none">
        <tgroup cols="2">
          <tbody>
            <row>
              <entry align="center" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata fileref="Images/act_start.jpg"/>
                  </imageobject>
                </mediaobject></entry>

              <entry>Start event activity - the place where the process
              begins.</entry>
            </row>

            <row>
              <entry align="center" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata fileref="Images/act_end.jpg"/>
                  </imageobject>
                </mediaobject></entry>

              <entry>End event activity - the place where the process
              ends.</entry>
            </row>

            <row>
              <entry align="center" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata fileref="Images/act_no.jpg"/>
                  </imageobject>
                </mediaobject></entry>

              <entry>Manual (No implementation) activities are atomic (Generic
              Activities). They are the smallest units of work, although even
              this activity may produce more than one work item for its
              performer.</entry>
            </row>

            <row>
              <entry align="center" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata fileref="Images/act_tool.jpg"/>
                  </imageobject>
                </mediaobject></entry>

              <entry>Task-Application activities are atomic (Generic
              Activity). They are the smallest units of work.</entry>
            </row>

            <row>
              <entry align="center" valign="middle"><mediaobject
                  condition="demo-emptytext">
                  <imageobject>
                    <imagedata fileref="Images/act_subflow.jpg"/>
                  </imageobject>
                </mediaobject></entry>

              <entry condition="demo-details-table">Subflow is another
              activity type. It implements a whole new workflow process.
              Process definition within the subflow is entirely independent
              from the first one (where subflow activity resides). It has its
              own set of activities, internal transitions, participants,
              application definitions and other workflow relevant data. When
              clicking on the box with the "plus" sign, the graph of the
              sub-flow gets shown.</entry>
            </row>

            <row condition="demo-emptytext">
              <entry align="center" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata fileref="Images/act_block.jpg"/>
                  </imageobject>
                </mediaobject></entry>

              <entry>An activity may be a block activity that executes an
              activity set , or map of activities and transitions. Activities
              and transitions within an activity set share the name space of
              the containing process. When clicking on the box with the "plus"
              sign, the graph of the activity set gets shown.</entry>
            </row>

            <row condition="demo-emptytext">
              <entry align="center" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata fileref="Images/act_route-gatewayexclusive.jpg"/>
                  </imageobject>
                </mediaobject></entry>

              <entry>Dummy (route) activity does nothing on its own. This type
              of activities is used for exclusive synchronization and
              constructing complex and sophisticated "exclusvie" transitional
              conditions</entry>
            </row>

            <row condition="demo-emptytext">
              <entry align="center" valign="middle"><mediaobject>
                  <imageobject>
                    <imagedata fileref="Images/act_route-gatewayparallel.jpg"/>
                  </imageobject>
                </mediaobject></entry>

              <entry>Dummy (route) activity does nothing on its own. This type
              of activities is used for parallel synchronization and parallel
              (unconditional) branching</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Icons for inserting different types of activities from the graph
      toolbox are the same as the ones included in the previously explained
      picture of the activities in the graph. Graph's toolbox icon for
      inserting Start event activity into the graph is <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/start.gif"/>
          </imageobject>
        </inlinemediaobject> and for inserting End event activity into is
      <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/end.gif"/>
          </imageobject>
        </inlinemediaobject>. For the manual activity, there is a toolbox icon
      <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/genericactivity.gif"/>
          </imageobject>
        </inlinemediaobject>, for Tool activities <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/activitytool.gif"/>
          </imageobject>
        </inlinemediaobject>, for subflow activities<inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/subflowactivity.gif"/>
          </imageobject>
        </inlinemediaobject>, for block activities <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/blockactivity.gif"/>
          </imageobject>
        </inlinemediaobject> and for route activities <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/gatewayexclusive.gif"/>
          </imageobject>
        </inlinemediaobject> (for exclusive gateway route activity) and
      <inlinemediaobject>
          <imageobject>
            <imagedata fileref="Images/gatewayparallel.gif"/>
          </imageobject>
        </inlinemediaobject> (for parallel gateway route activity). Once
      selected, mouse cursor will show what type of object you'll insert.
      Activity is created using some default values for their properties,
      which typically are to be changed. Right clicking the object in the
      graph shows a context menu, and there is item representing action for
      getting property panel. Different than others, Block and SubFlow
      activities have additional menu item "descend into..." which is used to
      display the graph of the referenced ActivitySet/Workflow Process.</para>

      <para>Beside this, TWE offers a special feature to select an Icon for
      particular activity. When you open activity's property panel, for the
      Icon entry you can select some of the additional Icons we offer (this
      list can be easily extended by putting more icons in
      tweactivityicons.jar file). The selected icon will appear instead the
      default one.</para>
    </sect2>

    <sect2 xml:id="Activity_Subflow">
      <title>Activity property panel</title>

      <para>In this section are explained various property panels concerning
      different types of activities: activities without implementation
      (manual), sub-flow, route, tool and block activities. All information
      are organized in several tabs: general, type, transition restriction,
      simulation information, and extended attributes.</para>

      <sect3>
        <title>General tab - displays general activity data</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/activityPropertiesGeneralDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>Tab has tree parts.
                First part contains activity <emphasis>id</emphasis>,
                <emphasis>name</emphasis>, <emphasis>performer</emphasis> (can
                be a reference to a participant or an expression),
                <emphasis>start mode</emphasis> (can be automatic or manual)
                and <emphasis>finish mode</emphasis> (can be automatic or
                manual). </para><para>Second part shows all deadlines and also
                offers toolbar buttons with options to handle list of
                deadlines.</para><para>Third part contains
                <emphasis>priority</emphasis> (describes initial priority for
                activity), <emphasis>limit</emphasis> (expected duration - for
                time management purposes), <emphasis>icon</emphasis>
                (reference to the icon representing this activity),
                <emphasis>documentation</emphasis> (reference to an external
                document) and <emphasis>description</emphasis>.</para><para>
                Fields icon and documentation have drop down list to select
                one of the offered icons. If selected, this icon will replace
                the original one representing this activity within the
                graph.</para><para>(the list of available icons can be
                extended by putting additional icons within the
                tweactivityicons.jar file)</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Type tab</title>

        <para>This tab contains some specific data concerning the particular
        type of an activity. For activities without implementation (manual)
        <inlinemediaobject>
            <imageobject>
              <imagedata fileref="Images/genericactivity.gif"/>
            </imageobject>
          </inlinemediaobject> this tab doesn't contain any specific
        data.</para>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>Block activity type
                property panel contains information about <emphasis>activity
                set id</emphasis>, which is a reference to defined ActivitySet
                (re-usable block of activities and transitions which shares
                the context of the workflow process where
                defined).</para><para>A block activity <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="Images/blockactivity.gif"/>
                    </imageobject>
                  </inlinemediaobject> executes referenced ActivitySet or
                self-contained activities/transitions map. When block activity
                is being executed, the execution proceeds to the first
                activity within the ActivitySet it references, and continues
                within the set until it reaches ActivitySet's exit activity
                (an activity with no output transitions). Execution then
                returns to follow the output transitions of the block
                activity.</para></entry>

                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/activityPropertiesBlockActDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/activityPropertiesToolActDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>Task-application
                activity property panel enables to define a reference to the
                application required for enactment engine to run, in order to
                perform the activity. </para><para>Basically, this tab allows
                you to pick the desired application by selecting it from the
                combo-box, and then allows definition of actual parameters
                (variables or expressions) to pass to the referenced
                application depending on its formal parameters.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>Subflow
                <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="Images/subflowactivity.gif"/>
                    </imageobject>
                  </inlinemediaobject> is type of activity whose
                implementation is another workflow
                process.</para><para>Firstly, attribute
                <emphasis>id</emphasis> should be set. <emphasis>Id</emphasis>
                defines workflow process that will be executed. In TWE you are
                setting this attribute by picking the one of the
                WorkflowProcesses defined within the combo box. Beside the
                combo, you have a shortcut to display the properties of the
                WorkflowProcess selected within the combo.</para><para>Then,
                <emphasis>execution (mode)</emphasis> attribute should be set.
                <emphasis>Synchronous execution mode</emphasis> suspends
                execution of calling process until sub-flow is finished.
                <emphasis>Asynchronous mode</emphasis>, spawns a new thread of
                execution for sub-flow process, which is then executed at its
                own pace, independently from calling workflow
                process.</para><para>While entering <emphasis>actual
                parameters</emphasis> that will be passed to subflow process,
                TWE shows the list of corresponding <emphasis>formal
                parameters</emphasis> of the referenced
                sub-process.</para></entry>

                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/activityPropertiesSubflowActDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>

              <row>
                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/activityPropertiesRestrictionDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>When gateway (routing)
                activity is selected, type tab allows to change the gateway
                type from parallel to exclusive or vice-versa. In the case of
                exclusive gateways with more than one outgoing transition from
                the gateway, the order of calculating outgoing transition
                conditions is important. This order is determined in XPDL by
                the order of TransitionRef elements within its TransitionRefs
                collection. From here, you can control that order. The way of
                doing it is to simply change positions of the target
                activities (the activities that outgoing transitions are
                leading to) within the given list.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Simulation Information tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry colsep="0" valign="middle"><para>Here are defined
                various information about simulation: whether the activity is
                instantiated once or multiple times, cost, waiting and working
                times and duration.</para></entry>

                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/activityPropertiesSimulationDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>

      <sect3>
        <title>Extended Attributes tab</title>

        <informaltable frame="none" rowsep="0">
          <tgroup cols="2" colsep="0">
            <tbody>
              <row>
                <entry valign="middle"><mediaobject>
                    <imageobject>
                      <imagedata contentdepth="100%"
                                 fileref="Images/activityPropertiesExtAttDialog.gif"
                                 scalefit="1" valign="middle" width="100%"/>
                    </imageobject>
                  </mediaobject></entry>

                <entry colsep="0" valign="middle"><para>It contains
                information about all extended attributes of the selected
                activity in form a of a table and operations for their
                managing. Every table row (extended attribute) is described
                with <emphasis>name</emphasis> and <emphasis>value</emphasis>.
                </para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </sect3>
    </sect2>
  </sect1>

  <sect1 xml:id="artifacts">
    <title>Artifacts</title>

    <para>To satisfy additional modeling concepts that are not part of the
    basic set of flow elements (activities and transitions), BPMN provides the
    concept of Artifacts that can be linked to the existing Activity object
    through Associations. Thus, Artifacts do <emphasis
    role="bold">not</emphasis> affect the basic sequence flow, nor do they
    affect mappings to execution languages.Artifacts are used to show
    additional information about a Process that is not directly related to its
    sequence flow.</para>

    <para>At this point, BPMN provides three standard Artifacts: A Data
    Object, a Group, and an Annotation. TWE currently allows you to use the
    first two types of artifacts.</para>

    <para>An Artifact is a graphical object that provides supporting
    information about the Process or elements within the Process. However, as
    mentioned, it does <emphasis role="bold">not</emphasis> directly affect
    the flow of the Process. BPMN provides a specific graphical representation
    for the different artifacts:</para>

    <figure>
      <title>BPMN Notation for Artifacts</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="Images/artifacts_bpmn_notation.jpg" scalefit="1"
                     valign="middle" width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <table>
      <title>Artifact attributes</title>

      <tgroup cols="3" colsep="1" rowsep="1">
        <colspec align="center" colname="col0" colnum="1" colwidth="2.33*"/>

        <colspec colname="col02" colnum="2" colwidth="1.00*"/>

        <colspec colname="col2" colnum="3" colwidth="6.04*"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry align="center" colname="col02">M/O</entry>

            <entry colname="col2">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Name</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">Name of the artifact.</entry>
          </row>

          <row>
            <entry colname="col0">ArtifactType</entry>

            <entry align="center" colname="col02">M</entry>

            <entry colname="col2">DataObject | Group | Annotation</entry>
          </row>

          <row>
            <entry colname="col0">TextAnnotation</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">Visible textual description.</entry>
          </row>

          <row>
            <entry colname="col0">DataObject</entry>

            <entry align="center" colname="col02">O</entry>

            <entry colname="col2">When artifact is DataObject type, it
            describes other attributes of an artifact.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>In BPMN, a Data Object is considered an Artifact because it does not
    have any direct affect on the sequence flow of the Process, but it does
    provide information about what the Process does. That is, how documents,
    data, and other objects are used and updated during the Process. While the
    name - Data Object may imply an electronic document, it can be used to
    represent many different types of objects, both electronic and
    physical.</para>

    <para>As an Artifact, Data Objects generally will be associated with
    activities. An Association will be used to make the connection between the
    Data Object and the Flow Object. This means that the behavior of the
    Process can be modeled without Data Objects for modelers who want to
    reduce clutter. The same Process can be modeled with Data Objects for
    modelers who want to include more information without changing the basic
    behavior of the Process.</para>

    <para>The following is a sample of process modeled with an artifact
    showing the information about the document flowing from one activity to
    another:</para>

    <figure>
      <title>Artifact Sample</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" contentdepth="100%"
                     fileref="Images/artifact_dataobject_sample.jpg"
                     scalefit="1" valign="middle" width="100%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The following table shows the picture of how the graph represents
    different XPDL artifact type:</para>

    <informaltable frame="none">
      <tgroup cols="2">
        <tbody>
          <row>
            <entry><mediaobject>
                <imageobject>
                  <imagedata fileref="Images/artifact_dataobject.jpg"/>
                </imageobject>
              </mediaobject></entry>

            <entry>Data object artifact.</entry>
          </row>

          <row>
            <entry><mediaobject>
                <imageobject>
                  <imagedata fileref="Images/artifact_annotation.jpg"/>
                </imageobject>
              </mediaobject></entry>

            <entry>Text annotation artifact.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <informaltable frame="none" rowsep="0">
      <tgroup cols="2" colsep="0">
        <tbody>
          <row>
            <entry colsep="0" valign="middle"><para>Icons for inserting
            different types of artifacts from the graph toolbox are
            <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="Images/dataobject.gif"/>
                </imageobject>
              </inlinemediaobject> for dataobject artifact, and
            <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="Images/annotation.gif"/>
                </imageobject>
              </inlinemediaobject>for text annotation
            artifact.</para><para>The picture on the right shows property
            panel for defining artifact properties.</para></entry>

            <entry valign="middle"><mediaobject>
                <imageobject>
                  <imagedata contentdepth="100%"
                             fileref="Images/artifactPropertiesDialog.gif"
                             scalefit="1" valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1 xml:id="Process_Transitions">
    <title>Transitions</title>

    <para condition="demo-details">Link between two activities is established
    by transitions. Transitions are more than just the links between
    activities. They also describe the condition that must be satisfied in
    order to get from the source to the target activity (This condition is
    evaluated during workflow execution).</para>

    <para condition="demo-emptytext">Typically, you will insert the
    transitions using TWE's Graph component (although it is possible to do it
    through the property panels).</para>

    <para condition="demo-emptytext">Graph component allows you to chose
    between conditional <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/transition.gif"/>
        </imageobject>
      </inlinemediaobject>, unconditional <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/unconditional.gif"/>
        </imageobject>
      </inlinemediaobject>, otherwise <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/transitionotherwise.gif"/>
        </imageobject>
      </inlinemediaobject>, exception <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/transitionexception.gif"/>
        </imageobject>
      </inlinemediaobject> and default exception <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/transitiondefaultexception.gif"/>
        </imageobject>
      </inlinemediaobject> transition for the insertion. If you want to insert
    a circular transition (a transition from activity to itself), you can
    chose the type of the transition you like, and double-click on the
    activity within the graph.</para>

    <para condition="demo-emptytext">If insertion of the transition is not
    allowed by some rules (e.g. you can't insert two transitions connecting
    the same activities), you'll be notified or graph component will simply
    deny to insert such transition.</para>

    <para condition="demo-emptytext">Here is the table of transition
    attributes:</para>

    <table condition="demo-emptytext">
      <title>Transition</title>

      <tgroup cols="3" colsep="1" rowsep="1">
        <colspec align="center" colnum="2"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>M/O</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Condition</entry>

            <entry>O</entry>

            <entry>A Transition condition expression based on workflow
            relevant data.</entry>
          </row>

          <row>
            <entry>Description</entry>

            <entry>O</entry>

            <entry>Short textual description of the Transition.</entry>
          </row>

          <row>
            <entry>Extended Attributes</entry>

            <entry>O</entry>

            <entry>Optional extensions to meet individual implementation
            needs.</entry>
          </row>

          <row>
            <entry>Id</entry>

            <entry>M</entry>

            <entry>Used to identify the Transition.</entry>
          </row>

          <row>
            <entry>From</entry>

            <entry>M</entry>

            <entry>Determines the FROM source of a Transition (Activity
            Identifier).</entry>
          </row>

          <row>
            <entry>To</entry>

            <entry>M</entry>

            <entry>Determines the TO target of a Transition (Activity
            Identifier).</entry>
          </row>

          <row>
            <entry>Name</entry>

            <entry>O</entry>

            <entry>Text used to identify the Transition.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <informaltable frame="none" rowsep="0">
      <tgroup cols="2" colsep="0">
        <tbody>
          <row>
            <entry valign="middle"><mediaobject>
                <imageobject>
                  <imagedata contentdepth="100%"
                             fileref="Images/transitionDialog.gif"
                             scalefit="1" valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>

            <entry colsep="0" valign="middle"><para>The picture on the left
            shows a dialog for editing Transition attributes. </para><para>TWE
            helps you when you are composing Transition condition - by
            clicking the arrow right to the text box for entering condition,
            you get a list of possible variables you can use within condition.
            Also, you can change transition from/to attributes by chosing
            another from the combo-boxes. There is a link next to those combo
            boxes to navigate to the selected Activity.</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1 xml:id="Associations">
    <title>Associations</title>

    <para condition="demo-details">Link between activity and artifact is
    established by association.</para>

    <para condition="demo-details">An Association does not have a specific
    mapping to an execution language element. These objects and the Artifacts
    they connect to provide additional information for the reader of the BPMN
    Diagram, but do not directly affect the execution of the Process.</para>

    <para condition="demo-emptytext">Typically, you will insert the
    association using TWE's Graph component (although it is possible to do it
    through the property panels).</para>

    <para condition="demo-emptytext">Graph component allows you to chose
    between directional <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/association.gif"/>
        </imageobject>
      </inlinemediaobject>, non-directional <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/association_nodirection.gif"/>
        </imageobject>
      </inlinemediaobject> and bi-directional <inlinemediaobject>
        <imageobject>
          <imagedata fileref="Images/association_bidirection.gif"/>
        </imageobject>
      </inlinemediaobject> association for the insertion.</para>

    <para condition="demo-emptytext">If insertion of the association is not
    allowed by some rules (e.g. you can't insert two associations connecting
    the same artifact and activity, or you can't insert association between
    two artifacts or two activities), graph component will simply deny to
    insert such association.</para>

    <para condition="demo-emptytext">Here is the table of transition
    attributes:</para>

    <table condition="demo-emptytext">
      <title>Association</title>

      <tgroup cols="3" colsep="1" rowsep="1">
        <colspec align="center" colnum="2"/>

        <thead>
          <row>
            <entry>Name</entry>

            <entry>M/O</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Id</entry>

            <entry>M</entry>

            <entry>Used to identify the Transition.</entry>
          </row>

          <row>
            <entry>Name</entry>

            <entry>O</entry>

            <entry>Text used to identify association.</entry>
          </row>

          <row>
            <entry>Source</entry>

            <entry>M</entry>

            <entry>Determines the source of an Association (Activity or
            Artifact Identifier).</entry>
          </row>

          <row>
            <entry>Target</entry>

            <entry>M</entry>

            <entry>Determines the target of an Association (Activity or
            Artifact Identifier).</entry>
          </row>

          <row>
            <entry>Association direction</entry>

            <entry>M</entry>

            <entry>The direction for association, possible values: None, To,
            From, Both</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <informaltable frame="none" rowsep="0">
      <tgroup cols="2" colsep="0">
        <tbody>
          <row>
            <entry colsep="0" valign="middle"><para
            condition="demo-emptytext">Picture on the right shows a dialog for
            editing Association attributes.</para><para>You can change
            association source/target attributes by chosing another from the
            combo-boxes. There is a link next to those combo boxes to navigate
            to the selected Activity/Artifact.</para></entry>

            <entry valign="middle"><mediaobject>
                <imageobject>
                  <imagedata contentdepth="100%"
                             fileref="Images/associationPropertyDialog.gif"
                             scalefit="1" valign="middle" width="100%"/>
                </imageobject>
              </mediaobject></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>
</chapter>
