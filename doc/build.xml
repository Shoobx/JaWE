<!--
    Together Workflow Editor
    Copyright (C) 2010 Together Teamsolutions Co., Ltd.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or 
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful, 
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program. If not, see http://www.gnu.org/licenses
-->
<!-- ======================================================================= -->
<!-- ANT-Makefile for TWE                                                    -->
<!-- ======================================================================= -->
<project name="TogWE-doc" default="buildDoc" basedir=".">

	<!-- ==================================================================== -->
	<!-- Init target                                                          -->
	<!-- ==================================================================== -->
	<target name="init">

		<!--Set the global variables-->
		<property name="docbook.name" value="twe-doc" />
		<property name="doc.title" value="Together Workflow Editor" />
		<property name="version" value="3.3" />
		<property name="release" value="1" />
		<property name="build.debug" value="off" />

		<property name="project.name" value="TWE" />
		<property name="app.name" value="twe" />

		<!-- Operating system  -->
		<condition property="os" value="windows">
			<os family="windows" />
		</condition>
		<condition property="os" value="unix">
			<os family="unix" />
		</condition>

		<condition property="path.separator" value=";">
			<os family="windows" />
		</condition>
		<condition property="path.separator" value=":">
			<os family="unix" />
		</condition>

		<condition property="executable.extension" value=".exe">
			<os family="windows" />
		</condition>
		<condition property="executable.extension" value="">
			<os family="unix" />
		</condition>

		<!--Set the directories-->
		<property name="ext.lib.dir" location="${basedir}/../lib" />

		<!-- Set directories -->
		<property name="project.dir" location="${basedir}/.." />
		<property name="output.dir" location="${project.dir}/output" />
		<property name="build.dir" location="${output.dir}/${app.name}-${version}-${release}" />
		<property name="output.lib.dir" location="${build.dir}/lib" />
		<property name="output.doc.dir" location="${build.dir}/doc" />
		<property name="doc.dir" location="${basedir}" />
		<property name="tmp.dir" location="${basedir}/tmp" />
		<property name="util.dir" location="${project.dir}/util" />
		<property name="modules.dir" location="${project.dir}/modules" />

		<!--Classes directory-->
		<property name="sources.dir" location="${modules.dir}/sources" />

		<!--Set the main classpath-->
		<path id="classpath">
			<pathelement location="${ext.lib.dir}/jgraph.jar" />
			<pathelement location="${ext.lib.dir}/jh.jar" />
			<pathelement location="${ext.lib.dir}/batik-awt-util.jar" />
			<pathelement location="${ext.lib.dir}/batik-dom.jar" />
			<pathelement location="${ext.lib.dir}/batik-svggen.jar" />
			<pathelement location="${ext.lib.dir}/batik-util.jar" />
			<pathelement location="${ext.lib.dir}/batik-xml.jar" />
			<pathelement location="${ext.lib.dir}/xercesImpl.jar" />
			<pathelement location="${ext.lib.dir}/xml-apis.jar" />
			<pathelement location="${ext.lib.dir}/jEdit-syntax.jar" />
			<pathelement location="${ext.lib.dir}/itext.jar" />
			<pathelement location="${ext.lib.dir}/sharkxpdlmodel.jar" />
		</path>

		<!--Set the classpath for docbook-->
		<path id="xalan-classpath">
			<fileset dir="${util.dir}/xalan/lib">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<property name="docbook.fo.xsl" location="${util.dir}/docbook/xsl/fo/docbook.xsl" />
		<property name="docbook.pdf.classpath" location="${util.dir}/fop/lib/fop.jar${path.separator}${util.dir}/fop/lib/batik.jar${path.separator}${util.dir}/fop/lib/avalon-framework.jar${path.separator}${util.dir}/fop/lib/commons-io.jar${path.separator}${util.dir}/fop/lib/xmlgraphics-commons.jar${path.separator}${util.dir}/fop/lib/commons-logging.jar" />

		<!-- Setting IF task -->
		<taskdef name="if" classname="net.sf.antcontrib.logic.IfTask">
			<classpath>
				<fileset dir="${util.dir}/ant">
					<include name="antcontrib.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<!-- Setting TRY-CATCH task -->
		<taskdef name="trycatch" classname="net.sf.antcontrib.logic.TryCatchTask">
			<classpath>
				<fileset dir="${util.dir}/ant">
					<include name="antcontrib.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<!-- Setting FOP task -->
		<property name="fop.home" value="${util.dir}/fop/" />
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<fileset dir="${fop.home}/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>
	</target>

	<!-- ==================================================================== -->
	<!-- Prepare output                                                       -->
	<!-- ==================================================================== -->
	<target name="prepare" depends="init">
		<mkdir dir="${output.doc.dir}" />
		<mkdir dir="${tmp.dir}" />
	</target>

	<!-- ==================================================================== -->
	<!-- Content output                                                       -->
	<!-- ==================================================================== -->
	<target name="content" depends="prepare">
		<copy todir="${tmp.dir}/Images">
			<fileset dir="${doc.dir}/Images" />
		</copy>
	</target>

	<!-- ==================================================================== -->
	<!-- Create java API - javadoc                                            -->
	<!-- ==================================================================== -->
	<target name="javadoc" depends="prepare">
		<mkdir dir="${output.doc.dir}/api" />
		<!--Create Javadoc-->
		<property name="doctitle" value="${project.name} - Together Workflow Editor ${version}-${release} API" />
		<property name="header" value="${project.name} ${version}-${release} API" />
		<javadoc destdir="${output.doc.dir}/api" classpathref="classpath" packagenames="org.enhydra.jawe.*" doctitle="${doctitle}" windowtitle="${doctitle}" header="${header}" splitindex="yes" access="private" encoding="ISO-8859-1" additionalparam="-J-Xmx128m -breakiterator -quiet">
			<sourcepath>
				<pathelement path="${sources.dir}" />
			</sourcepath>
		</javadoc>
	</target>

	<target name="docbook.check">
		<uptodate property="docbook.notRequired" targetfile="${tmp.dir}/${docbook.name}-${version}-${release}.pdf">
			<srcfiles dir="${doc.dir}" includes="${docbook.name}.xml" />
		</uptodate>
	</target>

	<!-- ==================================================================== -->
	<!-- DocBook Documentation                                                -->
	<!-- ==================================================================== -->
	<target name="docbook" depends="prepareDocbook">
		<copy todir="${output.doc.dir}">
			<fileset dir="${tmp.dir}">
				<include name="**/Images/**" />
				<include name="*.pdf" />
				<include name="${docbook.name}-${version}-${release}.html" />
			</fileset>
		</copy>
		<copy file="${util.dir}/docbook/css/html.css" todir="${output.doc.dir}" />
	</target>

	<target name="rebranding">
		<copy file="${doc.dir}/${docbook.name}.xml" tofile="${tmp.dir}/${docbook.name}.xml" />
		<if>
			<istrue value="${rebranding}" />
			<then>
				<ant dir="${basedir}/../branding" target="copyDoc" inheritAll="true" inheritRefs="true" />
				<touch file="${doc.dir}/${docbook.name}.xml" />
			</then>
		</if>
	</target>

	<target name="prepareDocbook" depends="content, rebranding, docbook.check" unless="docbook.notRequired">
		<echo message="Removing DOCTYPE entries so xalan does not go to internet" />
		<replace dir="${tmp.dir}" value="">
			<include name="${docbook.name}.xml"/>
			<replacefilter>
				<replacetoken><![CDATA[<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"]]></replacetoken>
			</replacefilter>
			<replacefilter>
				<replacetoken><![CDATA[<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"]]></replacetoken>
			</replacefilter>
			<replacefilter>
				<replacetoken><![CDATA["http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">]]></replacetoken>
			</replacefilter>
		</replace>
 
    <echo message="compile docbook with javahelp.xsl" />
		<retry retrycount="10">
			<trycatch description="try-catch">
				<try>
					<java classname="org.apache.xalan.xslt.Process" classpathref="xalan-classpath" dir="${tmp.dir}" fork="true">
						<arg line="-param html.stylesheet html.css -param ignore.image.scaling 1 -in ${docbook.name}.xml -xsl ${util.dir}/docbook/xsl/javahelp/javahelp.xsl" />
					</java>
				</try>
				<catch>
					<echo message="just retry ..." />
					<waitfor maxwait="1" maxwaitunit="minute" checkevery="1000">
						<http url="www.oasis-open.org" />
					</waitfor>
					<fail>Error generate docbook</fail>
				</catch>
			</trycatch>
		</retry>
		<replace file="${tmp.dir}/jhelptoc.xml" token="text=&quot;&quot;" value="text=&quot;${doc.title}&quot;" />
		<echo message="compile docbook with chunk.xsl" />
		<retry retrycount="10">
			<trycatch description="try-catch">
				<try>
					<java classname="org.apache.xalan.xslt.Process" classpathref="xalan-classpath" fork="true" dir="${tmp.dir}">
						<arg line="-param html.stylesheet html.css -param ignore.image.scaling 1 -out ${docbook.name}-${version}-${release}.html -in ${docbook.name}.xml -xsl ${util.dir}/docbook/xsl/html/chunk.xsl" />
					</java>
				</try>
				<catch>
					<echo message="just retry ..." />
					<waitfor maxwait="1" maxwaitunit="minute" checkevery="1000">
						<http url="www.oasis-open.org" />
					</waitfor>
					<fail>Error generate docbook</fail>
				</catch>
			</trycatch>
		</retry>

		<echo message="compile docbook with docbook.xsl" />
		<retry retrycount="10">
			<trycatch description="try-catch">
				<try>
					<java classname="org.apache.xalan.xslt.Process" classpathref="xalan-classpath" fork="true" dir="${tmp.dir}">
						<arg line="-param html.stylesheet html.css -param ignore.image.scaling 1 -out ${docbook.name}-${version}-${release}.html -in ${docbook.name}.xml -xsl ${util.dir}/docbook/xsl/html/docbook.xsl" />
					</java>
				</try>
				<catch>
					<echo message="just retry ..." />
					<waitfor maxwait="1" maxwaitunit="minute" checkevery="1000">
						<http url="www.oasis-open.org" />
					</waitfor>
					<fail>Error generate docbook</fail>
				</catch>
			</trycatch>
		</retry>

		<echo message="docbook to ${docbook.name}.fo" />
		<retry retrycount="10">
			<trycatch description="try-catch">
				<try>
					<java classname="org.apache.xalan.xslt.Process" classpathref="xalan-classpath" fork="true" dir="${tmp.dir}">
						<arg line="-param html.stylesheet html.css -out ${docbook.name}.fo -in ${docbook.name}.xml -xsl ${util.dir}/docbook/xsl/fo/docbook.xsl" />
					</java>
				</try>
				<catch>
					<echo message="just retry ..." />
					<waitfor maxwait="1" maxwaitunit="minute" checkevery="1000">
						<http url="www.oasis-open.org" />
					</waitfor>
					<fail>Error generate docbook</fail>
				</catch>
			</trycatch>
		</retry>

		<echo message="docbook to PDF  ${tmp.dir}/${docbook.name}.xml" />
		<retry retrycount="10">
			<trycatch description="try-catch">
				<try>
					<exec dir="${tmp.dir}" executable="java${executable.extension}" output="log.txt">
						<arg line="-cp ${docbook.pdf.classpath} org.apache.fop.cli.Main ${docbook.name}.fo ${docbook.name}-${version}-${release}.pdf" />
					</exec>
				</try>
				<catch>
					<echo message="just retry ..." />
					<waitfor maxwait="1" maxwaitunit="minute" checkevery="1000">
						<http url="www.oasis-open.org" />
					</waitfor>
					<fail>Error generate docbook</fail>
				</catch>
			</trycatch>
		</retry>

		<!--antcall target="generate-pdf" inheritall="true" inheritrefs="true" /-->

		<delete file="${tmp.dir}/${docbook.name}.fo" quiet="true" />
		<delete file="${tmp.dir}/${docbook.name}.xml" quiet="true" />

	</target>

	<target name="generate-pdf" description="Generates a single PDF file">
		<fop format="application/pdf" fofile="${tmp.dir}/${docbook.name}.fo" outfile="${tmp.dir}/${docbook.name}-${version}-${release}.pdf" logfiles="log.txt" />
	</target>

	<!-- ==================================================================== -->
	<!-- Create doc jar archive                                               -->
	<!-- ==================================================================== -->

	<target name="buildDocJar" depends="docbook">
		<delete file="${output.lib.dir}/${app.name}doc.jar" />
		<jar destfile="${output.lib.dir}/${app.name}doc.jar">
			<fileset dir="${tmp.dir}" excludes="**/*.pdf, **/twe-doc-${version}-${release}.html, **/api/**" />
		</jar>
	</target>

	<!-- ==================================================================== -->
	<!-- Documentation output                                                 -->
	<!-- ==================================================================== -->
	<target name="buildDoc" depends="init">
		<echo message="Documentation Build" />
		<ant target="buildDocJar" />
		<ant target="javadoc" />
	</target>

	<!-- ==================================================================== -->
	<!-- DocBook Documentation output                                         -->
	<!-- ==================================================================== -->
	<target name="buildDocBook" depends="init">
		<echo message="Documentation Build" />
		<ant target="docbook" />
	</target>

	<!-- ==================================================================== -->
	<!-- Cleans everything                                                    -->
	<!-- ==================================================================== -->
	<target name="clean">
		<delete dir="${output.doc.dir}" />
	</target>

</project>

